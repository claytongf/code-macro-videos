[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/components/Navbar/index.tsx":"4","/var/www/frontend/src/components/Navbar/Menu.tsx":"5","/var/www/frontend/src/components/Page.tsx":"6","/var/www/frontend/src/routes/AppRouter.tsx":"7","/var/www/frontend/src/routes/index.tsx":"8","/var/www/frontend/src/pages/Dashboard.tsx":"9","/var/www/frontend/src/components/Breadcrumbs.tsx":"10","/var/www/frontend/src/pages/category/PageList.tsx":"11","/var/www/frontend/src/pages/category/Table.tsx":"12","/var/www/frontend/src/util/http/index.ts":"13","/var/www/frontend/src/pages/genre/PageList.tsx":"14","/var/www/frontend/src/pages/genre/Table.tsx":"15","/var/www/frontend/src/pages/cast-member/PageList.tsx":"16","/var/www/frontend/src/pages/cast-member/Table.tsx":"17","/var/www/frontend/src/util/http/category-http.ts":"18","/var/www/frontend/src/util/http/http-resource.ts":"19","/var/www/frontend/src/pages/category/PageForm.tsx":"20","/var/www/frontend/src/pages/category/Form.tsx":"21","/var/www/frontend/src/pages/genre/PageForm.tsx":"22","/var/www/frontend/src/pages/genre/Form.tsx":"23","/var/www/frontend/src/util/http/genre-http.ts":"24","/var/www/frontend/src/pages/cast-member/PageForm.tsx":"25","/var/www/frontend/src/pages/cast-member/Form.tsx":"26","/var/www/frontend/src/util/http/cast-member-http.ts":"27","/var/www/frontend/src/theme.ts":"28","/var/www/frontend/src/components/Badge.tsx":"29","/var/www/frontend/src/util/vendor/yup.ts":"30","/var/www/frontend/src/components/SnackbarProvider.tsx":"31","/var/www/frontend/src/components/SubmitActions.tsx":"32","/var/www/frontend/src/components/DefaultForm.tsx":"33","/var/www/frontend/src/components/Table/index.tsx":"34","/var/www/frontend/src/components/Table/FilterResetButton.tsx":"35","/var/www/frontend/src/components/Table/DebouncedTableSearch.js":"36","/var/www/frontend/src/store/filter/index.ts":"37","/var/www/frontend/src/hooks/useFilter.ts":"38","/var/www/frontend/src/util/models.ts":"39","/var/www/frontend/src/pages/video/PageForm.tsx":"40","/var/www/frontend/src/pages/video/PageList.tsx":"41","/var/www/frontend/src/util/http/video-http.ts":"42","/var/www/frontend/src/components/Rating.tsx":"43","/var/www/frontend/src/pages/video/Form/index.tsx":"44","/var/www/frontend/src/pages/video/Form/RatingField.tsx":"45","/var/www/frontend/src/components/InputFile.tsx":"46","/var/www/frontend/src/pages/video/Form/UploadField.tsx":"47","/var/www/frontend/src/components/AsyncAutocomplete.tsx":"48","/var/www/frontend/src/pages/video/Form/GenreField.tsx":"49","/var/www/frontend/src/pages/video/Form/CategoryField.tsx":"50","/var/www/frontend/src/hooks/useHttpHandled.ts":"51","/var/www/frontend/src/components/GridSelectedItem.tsx":"52","/var/www/frontend/src/components/GridSelected.tsx":"53","/var/www/frontend/src/hooks/useCollectionManager.ts":"54"},{"size":500,"mtime":1608299870744,"results":"55","hashOfConfig":"56"},{"size":425,"mtime":1608299870744,"results":"57","hashOfConfig":"56"},{"size":921,"mtime":1613671900982,"results":"58","hashOfConfig":"56"},{"size":959,"mtime":1608323720178,"results":"59","hashOfConfig":"56"},{"size":1937,"mtime":1615302218884,"results":"60","hashOfConfig":"56"},{"size":658,"mtime":1608649921596,"results":"61","hashOfConfig":"56"},{"size":586,"mtime":1608584662648,"results":"62","hashOfConfig":"56"},{"size":2778,"mtime":1615304559261,"results":"63","hashOfConfig":"56"},{"size":252,"mtime":1608584424896,"results":"64","hashOfConfig":"56"},{"size":2369,"mtime":1609188477515,"results":"65","hashOfConfig":"56"},{"size":649,"mtime":1615304516497,"results":"66","hashOfConfig":"56"},{"size":5801,"mtime":1615304525261,"results":"67","hashOfConfig":"56"},{"size":125,"mtime":1608670477581,"results":"68","hashOfConfig":"56"},{"size":641,"mtime":1615304494249,"results":"69","hashOfConfig":"56"},{"size":9330,"mtime":1615298790302,"results":"70","hashOfConfig":"56"},{"size":674,"mtime":1615304522093,"results":"71","hashOfConfig":"56"},{"size":8036,"mtime":1615297691424,"results":"72","hashOfConfig":"56"},{"size":172,"mtime":1608734635707,"results":"73","hashOfConfig":"56"},{"size":1340,"mtime":1614791592776,"results":"74","hashOfConfig":"56"},{"size":400,"mtime":1613135072794,"results":"75","hashOfConfig":"56"},{"size":5387,"mtime":1614600901366,"results":"76","hashOfConfig":"56"},{"size":297,"mtime":1608754415311,"results":"77","hashOfConfig":"56"},{"size":6886,"mtime":1614776543979,"results":"78","hashOfConfig":"56"},{"size":162,"mtime":1608753416408,"results":"79","hashOfConfig":"56"},{"size":307,"mtime":1608754759253,"results":"80","hashOfConfig":"56"},{"size":5489,"mtime":1614601202156,"results":"81","hashOfConfig":"56"},{"size":178,"mtime":1608754723801,"results":"82","hashOfConfig":"56"},{"size":3466,"mtime":1614885420257,"results":"83","hashOfConfig":"56"},{"size":636,"mtime":1609187948724,"results":"84","hashOfConfig":"56"},{"size":435,"mtime":1615304289718,"results":"85","hashOfConfig":"56"},{"size":1485,"mtime":1615324826727,"results":"86","hashOfConfig":"56"},{"size":997,"mtime":1614364152842,"results":"87","hashOfConfig":"56"},{"size":830,"mtime":1614601814792,"results":"88","hashOfConfig":"56"},{"size":4416,"mtime":1614906079109,"results":"89","hashOfConfig":"56"},{"size":685,"mtime":1614792553803,"results":"90","hashOfConfig":"56"},{"size":3638,"mtime":1614805752532,"results":"91","hashOfConfig":"56"},{"size":2932,"mtime":1614879266745,"results":"92","hashOfConfig":"56"},{"size":8301,"mtime":1614886737879,"results":"93","hashOfConfig":"56"},{"size":1649,"mtime":1615384204997,"results":"94","hashOfConfig":"56"},{"size":342,"mtime":1615313096623,"results":"95","hashOfConfig":"56"},{"size":617,"mtime":1615304629661,"results":"96","hashOfConfig":"56"},{"size":162,"mtime":1615302183224,"results":"97","hashOfConfig":"56"},{"size":949,"mtime":1615314876955,"results":"98","hashOfConfig":"56"},{"size":12729,"mtime":1615385329813,"results":"99","hashOfConfig":"56"},{"size":2186,"mtime":1615315059091,"results":"100","hashOfConfig":"56"},{"size":1962,"mtime":1615321250585,"results":"101","hashOfConfig":"56"},{"size":2106,"mtime":1615321388832,"results":"102","hashOfConfig":"56"},{"size":2973,"mtime":1615383290969,"results":"103","hashOfConfig":"56"},{"size":2693,"mtime":1615385461456,"results":"104","hashOfConfig":"56"},{"size":2869,"mtime":1615385466832,"results":"105","hashOfConfig":"56"},{"size":597,"mtime":1615380846916,"results":"106","hashOfConfig":"56"},{"size":886,"mtime":1615378861170,"results":"107","hashOfConfig":"56"},{"size":726,"mtime":1615378591310,"results":"108","hashOfConfig":"56"},{"size":874,"mtime":1615379524899,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"105ko5q",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"112"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"112"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"112"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"112"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/frontend/src/index.tsx",[],["229","230"],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/var/www/frontend/src/components/Navbar/Menu.tsx",[],"/var/www/frontend/src/components/Page.tsx",[],"/var/www/frontend/src/routes/AppRouter.tsx",[],"/var/www/frontend/src/routes/index.tsx",[],"/var/www/frontend/src/pages/Dashboard.tsx",[],"/var/www/frontend/src/components/Breadcrumbs.tsx",[],"/var/www/frontend/src/pages/category/PageList.tsx",[],"/var/www/frontend/src/pages/category/Table.tsx",["231","232"],"import * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport categoryHttp from '../../util/http/category-http';\nimport { BadgeNo, BadgeYes } from '../../components/Badge';\nimport { Category, ListResponse } from '../../util/models';\nimport DefaultTable, {makeActionStyles ,TableColumn, MuiDataTableRefComponent} from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit'\nimport { FilterResetButton } from '../../components/Table/FilterResetButton';\nimport useFilter from '../../hooks/useFilter';\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            filterOptions: {\n                names: ['Sim', 'Não']\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return value ? <BadgeYes/> : <BadgeNo/>\n            }\n        },\n        width: '4%'\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst debounceTime = 300\nconst debounceSearchTime = 300\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const subscribed = React.useRef(true)\n    const [data, setData] = React.useState<Category[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const tableRef = React.useRef() as React.MutableRefObject<MuiDataTableRefComponent>\n\n    const {columns, filterManager, filterState, debouncedFilterState, totalRecords, setTotalRecords} = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef\n    })\n\n    React.useEffect(() => {\n        subscribed.current = true\n        filterManager.pushHistory()\n        getData()\n        return () => {\n            subscribed.current = false\n            //executado quando componente estiver desmontado\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ])\n\n    async function getData(){\n        setLoading(true)\n        try{\n            const {data} = await categoryHttp.list<ListResponse<Category>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir\n                }\n            })\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n            }\n        } catch(error){\n            console.error(error);\n            if(categoryHttp.isCancelledRequest(error)){\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"Listagem de categorias\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debounceSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSide: true,\n                    responsive: 'scrollMaxHeight',\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => filterManager.resetFilter()}/> //default\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) => filterManager.changeColumnSort(changedColumn, direction),\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/util/http/index.ts",[],"/var/www/frontend/src/pages/genre/PageList.tsx",[],"/var/www/frontend/src/pages/genre/Table.tsx",["233","234","235","236"],"import { Chip, IconButton, MuiThemeProvider } from '@material-ui/core';\nimport * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport genreHttp from '../../util/http/genre-http';\nimport { Category, Genre, ListResponse } from '../../util/models';\nimport DefaultTable, { makeActionStyles, MuiDataTableRefComponent, TableColumn } from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport EditIcon from '@material-ui/icons/Edit'\nimport { Link } from 'react-router-dom';\nimport * as yup from '../../util/vendor/yup'\nimport useFilter from '../../hooks/useFilter';\nimport { FilterResetButton } from '../../components/Table/FilterResetButton';\nimport categoryHttp from '../../util/http/category-http';\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '27%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: '16%',\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        options: {\n            filterType: 'multiselect',\n            filterOptions: {\n                names: []\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return value.map((value: any) => value.name).join(\", \")\n            }\n        },\n        width: '30%'\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            filterOptions: {\n                names: ['Sim', 'Não']\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return value ? <Chip label=\"Sim\" color=\"primary\"/> : <Chip label=\"Não\" color=\"secondary\"/>\n            }\n        },\n        width: \"4%\"\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        },\n        width: \"10%\"\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst debounceTime = 300\nconst debounceSearchTime = 300\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const subscribed = React.useRef(true)\n    const [data, setData] = React.useState<Genre[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const [categories, setCategories] = React.useState<Category[]>()\n    const tableRef = React.useRef() as React.MutableRefObject<MuiDataTableRefComponent>\n\n    const {columns, filterManager, filterState, debouncedFilterState, totalRecords, setTotalRecords} = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    categories: yup.mixed()\n                        .nullable()\n                        .transform(value => {\n                            return !value || value === '' ? undefined : value.split(',');\n                        })\n                        .default(null)\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter\n                ? {\n                    ...(\n                        debouncedState.extraFilter.categories &&\n                        {categories: debouncedState.extraFilter.categories.join(',')}\n                    )\n                }\n                : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    categories: queryParams.get('categories')\n                }\n            }\n        }\n    })\n\n    const indexColumnCategories = columns.findIndex(c => c.name === 'categories')\n    const columnCategories = columns[indexColumnCategories]\n    const categoriesFilterValue = filterState.extraFilter && filterState.extraFilter.categories;\n    (columnCategories.options as any).filterList = categoriesFilterValue ? categoriesFilterValue : []\n\n    const serverSideFilterList = columns.map(column => [])\n    if(categoriesFilterValue){\n        serverSideFilterList[indexColumnCategories] = categoriesFilterValue\n    }\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async () => {\n            try {\n                const {data} = await categoryHttp.list({queryParams: {all: ''}})\n                if (isSubscribed) {\n                    setCategories(data.data);\n                    (columnCategories.options as any).filterOptions.names = data.data.map(category => category.name)\n                }\n            } catch (error) {\n                console.error(error)\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }\n            return () => {\n                 isSubscribed = false;\n                //executado quando componente estiver desmontado\n            }\n        })();\n    },[])\n\n    React.useEffect(() => {\n        subscribed.current = true\n        filterManager.pushHistory()\n        getData()\n        return () => {\n            subscribed.current = false\n            //executado quando componente estiver desmontado\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ])\n\n    async function getData(){\n        setLoading(true)\n        try{\n            const {data} = await genreHttp.list<ListResponse<Genre>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.categories &&\n                        {categories: debouncedFilterState.extraFilter.categories.join(\",\")}\n                    )\n                }\n            })\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n            }\n        } catch (error) {\n            console.error(error);\n            if(genreHttp.isCancelledRequest(error)){\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"Listagem de gêneros\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debounceSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSideFilterList,\n                    serverSide: true,\n                    responsive: 'scrollMaxHeight',\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList) => {\n                        const columnIndex = columns.findIndex(c => c.name === column)\n                        filterManager.changeExtraFilter({\n                            [column]: filterList[columnIndex].length ? filterList[columnIndex] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => filterManager.resetFilter()}/> //default\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) => filterManager.changeColumnSort(changedColumn, direction),\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/pages/cast-member/PageList.tsx",[],"/var/www/frontend/src/pages/cast-member/Table.tsx",["237","238","239"],"import * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember, ListResponse, CastMemberTypeMap } from '../../util/models';\nimport DefaultTable, { makeActionStyles, MuiDataTableRefComponent, TableColumn } from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit'\nimport * as yup from '../../util/vendor/yup'\nimport useFilter from '../../hooks/useFilter';\nimport { FilterResetButton } from '../../components/Table/FilterResetButton';\nimport { invert } from 'lodash';\n\nconst castMemberNames = Object.values(CastMemberTypeMap)\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"type\",\n        label: \"Tipo\",\n        options: {\n            filterOptions: {\n                names: castMemberNames\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return CastMemberTypeMap[value]\n            }\n        },\n        width: \"4%\"\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        },\n        width: '10%',\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst debounceTime = 300\nconst debounceSearchTime = 300\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const subscribed = React.useRef(true)\n    const [data, setData] = React.useState<CastMember[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const tableRef = React.useRef() as React.MutableRefObject<MuiDataTableRefComponent>\n\n    const {columns, filterManager, filterState, debouncedFilterState, totalRecords, setTotalRecords} = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    type: yup.string()\n                        .nullable()\n                        .transform(value => {\n                            return !value || !castMemberNames.includes(value) ? undefined : value;\n                        })\n                        .default(null)\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter\n                ? {\n                    ...(\n                        debouncedState.extraFilter.type &&\n                        {type: debouncedState.extraFilter.type}\n                    )\n                }\n                : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    type: queryParams.get('type')\n                }\n            }\n        }\n    })\n\n    const indexColumnType = columns.findIndex(c => c.name === 'type')\n    const columnType = columns[indexColumnType]\n    const typeFilterValue = filterState.extraFilter && filterState.extraFilter.type as never;\n    (columnType.options as any).filterList = typeFilterValue ? [typeFilterValue] : []\n\n    const serverSideFilterList = columns.map(column => [])\n    if(typeFilterValue){\n        serverSideFilterList[indexColumnType] = [typeFilterValue]\n    }\n\n    React.useEffect(() => {\n        subscribed.current = true\n        filterManager.pushHistory()\n        getData()\n        return () => {\n            subscribed.current = false\n            //executado quando componente estiver desmontado\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ])\n\n    async function getData(){\n        setLoading(true)\n        try{\n            const {data} = await castMemberHttp.list<ListResponse<CastMember>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.type &&\n                        {type: invert(CastMemberTypeMap)[debouncedFilterState.extraFilter.type]}\n                    )\n                }\n            })\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n            }\n        } catch (error) {\n            console.error(error);\n            if(castMemberHttp.isCancelledRequest(error)){\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"Listagem de membros\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debounceSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSideFilterList,\n                    serverSide: true,\n                    responsive: 'scrollMaxHeight',\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList) => {\n                        const columnIndex = columns.findIndex(c => c.name === column)\n                        filterManager.changeExtraFilter({\n                            [column]: filterList[columnIndex].length ? filterList[columnIndex][0] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => filterManager.resetFilter()}/> //default\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) => filterManager.changeColumnSort(changedColumn, direction),\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/util/http/category-http.ts",[],"/var/www/frontend/src/util/http/http-resource.ts",[],"/var/www/frontend/src/pages/category/PageForm.tsx",[],"/var/www/frontend/src/pages/category/Form.tsx",["240"],"import { Checkbox, FormControlLabel, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport { useForm } from \"react-hook-form\"\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { Category } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, is_active: boolean}>({resolver, defaultValues: {is_active: true}})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [category, setCategory] = React.useState<Category | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"is_active\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCategory(){\n            setLoading(true)\n            try{\n                const {data} = await categoryHttp.get(id)\n                if(isSubscribed){\n                    setCategory(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !category\n                ? categoryHttp.create(formData)\n                : categoryHttp.update(category.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Categoria salva com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/categories/${data.data.id}/edit`)\n                            : history.push(`/categories/${data.data.id}/edit`)\n                    ) : history.push('/categories')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar categoria',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <FormControlLabel\n            disabled={loading}\n            control={\n                <Checkbox\n                    name=\"is_active\"\n                    color={\"primary\"}\n                    onChange={\n                        () => setValue('is_active', !getValues()['is_active'])\n                    }\n                    checked={watch('is_active')}\n                    disabled={loading}\n                />\n            }\n            label={'Ativo?'}\n            labelPlacement={'end'}\n            />\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/pages/genre/PageForm.tsx",[],"/var/www/frontend/src/pages/genre/Form.tsx",["241"],"// @flow\nimport { Checkbox, MenuItem, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport { NestedValue, useForm } from 'react-hook-form';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport genreHttp from '../../util/http/genre-http';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { Category, Genre } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            categories_id: yup.array().label('Categorias').required().min(1)\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, categories_id: NestedValue<string[]>}>({resolver,\n        defaultValues: {\n            categories_id: []\n        }\n    })\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [genre, setGenre] = React.useState<Genre | null>(null)\n    const [categories, setCategories] = React.useState<Category[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"categories_id\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async function loadData(){\n            setLoading(true)\n            const promises = [categoryHttp.list({queryParams: {all: ''}})]\n            if(id){\n                promises.push(genreHttp.get(id))\n            }\n            try{\n                const [categoriesResponse, genreResponse] = await Promise.all(promises)\n                if(isSubscribed){\n                    setCategories(categoriesResponse.data.data)\n                    if(id){\n                        setGenre(genreResponse.data.data)\n                        const categories_id = genreResponse.data.data.categories.map(category => category.id)\n                        reset({\n                            ...genreResponse.data.data,\n                            categories_id\n                        })\n                    }\n                }\n\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !genre\n                ? genreHttp.create(formData)\n                : genreHttp.update(genre.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Gênero salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/genres/${data.data.id}/edit`)\n                            : history.push(`/genres/${data.data.id}/edit`)\n                    ) : history.push('/genres')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Gênero',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                select\n                name=\"categories_id\"\n                value={watch('categories_id')}\n                label=\"Categories\"\n                margin={'normal'}\n                variant={'outlined'}\n                fullWidth\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value)\n                }}\n                SelectProps={{\n                    multiple: true\n                }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n                helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{ shrink: true }}\n            >\n                <MenuItem value=\"\" disabled>\n                    <em>Selecione categorias</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category, key) => (\n                            <MenuItem key={key} value={category.id}>{category.name}</MenuItem>\n                        )\n                    )\n                }\n            </TextField>\n            <Checkbox\n                name=\"is_active\"\n                inputRef={register}\n                defaultChecked\n            />\n            Ativo?\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/genre-http.ts",[],"/var/www/frontend/src/pages/cast-member/PageForm.tsx",[],"/var/www/frontend/src/pages/cast-member/Form.tsx",["242"],"import { FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup, TextField } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { DefaultForm } from '../../components/DefaultForm';\nimport SubmitActions from '../../components/SubmitActions';\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember } from '../../util/models';\nimport * as yup from '../../util/vendor/yup'\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            type: yup.number().label('Tipo').required()\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, type: string}>({resolver})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [castMember, setCastMember] = React.useState<CastMember | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"type\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCastMember(){\n            setLoading(true)\n            try{\n                const {data} = await castMemberHttp.get(id)\n                if(isSubscribed){\n                    setCastMember(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !castMember\n                ? castMemberHttp.create(formData)\n                : castMemberHttp.update(castMember.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Membro de Elenco salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/cast-members/${data.data.id}/edit`)\n                            : history.push(`/cast-members/${data.data.id}/edit`)\n                    ) : history.push('/cast-members')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Membro de Elenco',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink: true }}\n            />\n            <FormControl\n                margin={\"normal\"}\n                error={errors.type !== undefined}\n                disabled={loading}\n            >\n                <FormLabel component=\"legend\">Tipo</FormLabel>\n                <RadioGroup\n                    name=\"type\"\n                    onChange={(e) => {\n                        setValue('type', parseInt(e.target.value))\n                    }}\n                    value={watch('type') + \"\"}\n                >\n                    <FormControlLabel value=\"1\" control={<Radio color={\"primary\"}/>} label=\"Diretor\"/>\n                    <FormControlLabel value=\"2\" control={<Radio color={\"primary\"}/>} label=\"Ator\"/>\n                </RadioGroup>\n                {\n                    errors.type && <FormHelperText id=\"type-helper-text\">{errors.type.message}</FormHelperText>\n                }\n            </FormControl>\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/cast-member-http.ts",[],"/var/www/frontend/src/theme.ts",[],"/var/www/frontend/src/components/Badge.tsx",[],"/var/www/frontend/src/util/vendor/yup.ts",["243","244","245","246","247"],"import { setLocale } from 'yup'\n\nconst ptBR = {\n    mixed: {\n        required: '${path} é requerido',\n        notType: '${path} é inválido'\n    },\n    string: {\n        max: '${path} precisa ter no máximo ${max} caracteres'\n    },\n    number: {\n        min: '${path} precisa ser no mínimo ${min}'\n    },\n    array: {\n        min: 'Em ${path}, precisa escolher pelo menos ${min} item'\n    }\n}\n\nsetLocale(ptBR)\n\nexport * from 'yup'\n","/var/www/frontend/src/components/SnackbarProvider.tsx",[],"/var/www/frontend/src/components/SubmitActions.tsx",[],"/var/www/frontend/src/components/DefaultForm.tsx",[],"/var/www/frontend/src/components/Table/index.tsx",[],"/var/www/frontend/src/components/Table/FilterResetButton.tsx",[],"/var/www/frontend/src/components/Table/DebouncedTableSearch.js",[],["248","249"],"/var/www/frontend/src/store/filter/index.ts",[],"/var/www/frontend/src/hooks/useFilter.ts",["250"],"import { MUIDataTableColumn } from \"mui-datatables\";\nimport { Dispatch, MutableRefObject, Reducer, useEffect, useReducer, useState } from \"react\";\nimport * as yup from '../util/vendor/yup'\nimport reducer, { Creators } from \"../store/filter\";\nimport { Actions as FilterActions, State as FilterState} from \"../store/filter/types\";\nimport { useDebounce } from 'use-debounce'\nimport { useHistory } from \"react-router\";\nimport { History } from 'history'\nimport { isEqual } from 'lodash'\nimport { MuiDataTableRefComponent } from \"../components/Table\";\n\ninterface FilterManagerOptions {\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n    history: History;\n    tableRef: MutableRefObject<MuiDataTableRefComponent>\n    extraFilter?: ExtraFilter\n}\n\ninterface ExtraFilter {\n    getStateFromURL: (queryParams: URLSearchParams) => any,\n    formatSearchParams: (debouncedState: FilterState) => any,\n    createValidationSchema: () => any,\n}\n\ninterface UseFilterOptions extends Omit<FilterManagerOptions, 'history'>{\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n}\n\nexport default function useFilter(options: UseFilterOptions){\n    const history = useHistory()\n    const filterManager = new FilterManager({...options, history})\n    const INITIAL_STATE = filterManager.getStateFromURL()\n    const [filterState, dispatch] = useReducer<Reducer<FilterState, FilterActions>>(reducer, INITIAL_STATE);\n    const [debouncedFilterState] = useDebounce(filterState, options.debounceTime)\n    const [totalRecords, setTotalRecords] = useState<number>(0)\n\n    filterManager.state = filterState\n    filterManager.debouncedState = debouncedFilterState\n    filterManager.dispatch = dispatch\n    filterManager.applyOrderInColumns();\n\n    useEffect(() => {\n        filterManager.replaceHistory()\n    }, [])\n\n    return {\n        columns: filterManager.columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords\n    }\n}\n\nexport class FilterManager{\n    schema\n    state: FilterState = null as any;\n    debouncedState: FilterState = null as any;\n    dispatch: Dispatch<FilterActions> = null as any;\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    history: History\n    tableRef: MutableRefObject<MuiDataTableRefComponent>\n    extraFilter?: ExtraFilter\n\n    constructor(options: FilterManagerOptions){\n        const {columns, rowsPerPage, rowsPerPageOptions, history, tableRef, extraFilter } = options\n        this.columns = columns\n        this.rowsPerPage = rowsPerPage\n        this.rowsPerPageOptions = rowsPerPageOptions\n        this.history = history;\n        this.tableRef = tableRef;\n        this.extraFilter = extraFilter;\n        this.createValidationSchema()\n    }\n\n    private resetTablePagination(){\n        this.tableRef.current.changePage(0)\n        this.tableRef.current.changeRowsPerPage(this.rowsPerPage)\n    }\n\n    changeSearch(value) {\n        this.dispatch(Creators.setSearch({search: value}))\n    }\n\n    changePage(page) {\n        this.dispatch(Creators.setPage({page: page + 1}))\n    }\n\n    changeRowsPerPage(perPage){\n        this.dispatch(Creators.setPerPage({per_page: perPage}))\n    }\n\n    changeColumnSort(changedColumn: string, direction: string){\n        this.dispatch(Creators.setOrder({\n            sort: changedColumn,\n            dir: direction.includes('desc') ? 'desc' : 'asc'\n        }))\n        this.resetTablePagination()\n    }\n\n    changeExtraFilter(data){\n        this.dispatch(Creators.updateExtraFilter(data))\n    }\n\n    resetFilter(){\n        const INITIAL_STATE = {\n            ...this.schema.cast({}),\n            search: {value: null, update: true}\n        }\n        this.dispatch(Creators.setReset({\n            state: INITIAL_STATE\n        }))\n        this.resetTablePagination();\n    }\n\n    applyOrderInColumns(){\n        this.columns = this.columns.map(column => {\n            return column.name === this.state.order.sort ?\n            {\n                ...column,\n                options: {\n                    ...column.options,\n                    sortDirection: this.state.order.dir as any\n                }\n            } : column;\n        })\n    }\n\n    cleanSearchText(text){\n        let newText = text\n        if(text && text.value !== undefined){\n            newText = text.value\n        }\n        return newText\n    }\n\n    replaceHistory(){\n        this.history.replace({\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: this.debouncedState\n        })\n    }\n\n    pushHistory(){\n        const newLocation = {\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: {\n                ...this.debouncedState,\n                search: this.cleanSearchText(this.debouncedState.search)\n            }\n        }\n        const oldState = this.history.location.state\n        const nextState = this.debouncedState\n        if(isEqual(oldState, nextState)){\n            return\n        }\n        this.history.push(newLocation)\n    }\n\n    private formatSearchParams(){\n        const search = this.cleanSearchText(this.debouncedState.search)\n        return {\n            ...(search && search !== '' && {search: search}),\n            ...(this.debouncedState.pagination.page !== 1 && {page: this.debouncedState.pagination.page}),\n            ...(this.debouncedState.pagination.per_page !== 15 && {per_page: this.debouncedState.pagination.per_page}),\n            ...(\n                this.debouncedState.order.sort && {\n                    sort: this.debouncedState.order.sort,\n                    dir: this.debouncedState.order.dir\n                }\n            ),\n            ...(\n                this.extraFilter && this.extraFilter.formatSearchParams(this.debouncedState)\n            )\n        }\n    }\n\n    getStateFromURL(){\n        const queryParams = new URLSearchParams(this.history.location.search.substr(1))\n        return this.schema.cast({\n            search: queryParams.get('search'),\n            pagination: {\n                page: queryParams.get('page'),\n                per_page: queryParams.get('per_page')\n            },\n            order: {\n                sort: queryParams.get('sort'),\n                dir: queryParams.get('dir')\n            },\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.getStateFromURL(queryParams)\n                }\n            )\n        })\n    }\n\n    private createValidationSchema(){\n        this.schema = yup.object().shape({\n            search: yup.string()\n                .transform(value => !value ? undefined : value)\n                .default(''),\n            pagination: yup.object().shape({\n                page: yup.number()\n                    .transform(value => isNaN(value) || parseInt(value) < 1 ? undefined : value)\n                    .default(1),\n                per_page: yup.number()\n                    .transform(value => isNaN(value) || !this.rowsPerPageOptions.includes(parseInt(value)) ? undefined : value)\n                    .default(this.rowsPerPage),\n            }),\n            order: yup.object().shape({\n                sort: yup.string()\n                    .nullable()\n                    .transform(value => {\n                        const columnsName = this.columns\n                            .filter(column => !column.options || column.options.sort !== false)\n                            .map(column => column.name)\n                        return columnsName.includes(value) ? value : undefined\n                    })\n                    .default(null),\n                dir: yup.string()\n                    .nullable()\n                    .transform(value => !value || !['asc', 'desc'].includes(value.toLowerCase()) ? undefined : value)\n                    .default(null),\n            }),\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.createValidationSchema()\n                }\n            )\n        })\n    }\n}\n","/var/www/frontend/src/util/models.ts",[],"/var/www/frontend/src/pages/video/PageForm.tsx",[],"/var/www/frontend/src/pages/video/PageList.tsx",[],"/var/www/frontend/src/util/http/video-http.ts",[],"/var/www/frontend/src/components/Rating.tsx",[],"/var/www/frontend/src/pages/video/Form/index.tsx",["251","252","253","254"],"/var/www/frontend/src/pages/video/Form/RatingField.tsx",[],"/var/www/frontend/src/components/InputFile.tsx",[],"/var/www/frontend/src/pages/video/Form/UploadField.tsx",["255","256","257","258","259","260"],"// @flow\nimport { Box, Button, FormControl, FormControlLabel, FormControlLabelProps, FormControlProps, FormHelperText, FormLabel, Radio, RadioGroup } from '@material-ui/core';\nimport * as React from 'react';\nimport InputFile, { InputFileComponent } from '../../../components/InputFile';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\ninterface UploadFieldProps {\n    accept: string;\n    label: string;\n    setValue: (value) => void;\n    error?: any;\n    disabled?: boolean;\n    FormControlProps?: FormControlProps\n}\n\nexport const UploadField: React.FC<UploadFieldProps> = (props) => {\n    const fileRef = React.useRef() as React.MutableRefObject<InputFileComponent>;\n\n    const { accept, label, setValue, error, disabled} = props;\n\n    return (\n        <FormControl\n                error={error !== undefined}\n                disabled={disabled === true}\n                fullWidth\n                margin={\"normal\"}\n                {...props.FormControlProps}\n            >\n                <InputFile\n                    ref={fileRef}\n                    TextFieldProps={{\n                        label: label,\n                        InputLabelProps: {shrink: true},\n                        style:{backgroundColor: \"#FFFFFF\"}\n                    }}\n                    InputFileProps={{\n                        accept,\n                        onChange(event){\n                            const files = (event.target.files as any);\n                            files.length && setValue(files[0])\n                        }\n                        }}\n                    ButtonFile={\n                        <Button\n                            endIcon={<CloudUploadIcon/>}\n                            variant={\"contained\"}\n                            color={\"primary\"}\n                            onClick={() => fileRef.current.openWindow()}\n                        >\n                            Adicionar\n                        </Button>\n                    }\n                />\n                {error && <FormHelperText>{error.message}</FormHelperText>}\n            </FormControl>\n    );\n};\n","/var/www/frontend/src/components/AsyncAutocomplete.tsx",["261","262","263","264","265","266"],"/var/www/frontend/src/pages/video/Form/GenreField.tsx",["267"],"/var/www/frontend/src/pages/video/Form/CategoryField.tsx",["268"],"/var/www/frontend/src/hooks/useHttpHandled.ts",[],"/var/www/frontend/src/components/GridSelectedItem.tsx",[],"/var/www/frontend/src/components/GridSelected.tsx",[],"/var/www/frontend/src/hooks/useCollectionManager.ts",[],{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"274","line":107,"column":8,"nodeType":"275","endLine":112,"endColumn":6,"suggestions":"276"},{"ruleId":"273","severity":1,"message":"277","line":108,"column":9,"nodeType":"278","endLine":108,"endColumn":67},{"ruleId":"279","severity":1,"message":"280","line":104,"column":12,"nodeType":"281","messageId":"282","endLine":104,"endColumn":22},{"ruleId":"273","severity":1,"message":"283","line":173,"column":7,"nodeType":"275","endLine":173,"endColumn":9,"suggestions":"284"},{"ruleId":"273","severity":1,"message":"274","line":183,"column":8,"nodeType":"275","endLine":188,"endColumn":6,"suggestions":"285"},{"ruleId":"273","severity":1,"message":"277","line":184,"column":9,"nodeType":"278","endLine":184,"endColumn":67},{"ruleId":"273","severity":1,"message":"274","line":147,"column":8,"nodeType":"275","endLine":153,"endColumn":6,"suggestions":"286"},{"ruleId":"273","severity":1,"message":"277","line":148,"column":9,"nodeType":"278","endLine":148,"endColumn":67},{"ruleId":"273","severity":1,"message":"277","line":152,"column":9,"nodeType":"278","endLine":152,"endColumn":57},{"ruleId":"273","severity":1,"message":"287","line":91,"column":8,"nodeType":"275","endLine":91,"endColumn":10,"suggestions":"288"},{"ruleId":"273","severity":1,"message":"287","line":108,"column":8,"nodeType":"275","endLine":108,"endColumn":10,"suggestions":"289"},{"ruleId":"273","severity":1,"message":"287","line":92,"column":8,"nodeType":"275","endLine":92,"endColumn":10,"suggestions":"290"},{"ruleId":"291","severity":1,"message":"292","line":5,"column":19,"nodeType":"293","messageId":"294","endLine":5,"endColumn":40},{"ruleId":"291","severity":1,"message":"292","line":6,"column":18,"nodeType":"293","messageId":"294","endLine":6,"endColumn":38},{"ruleId":"291","severity":1,"message":"292","line":9,"column":14,"nodeType":"293","messageId":"294","endLine":9,"endColumn":63},{"ruleId":"291","severity":1,"message":"292","line":12,"column":14,"nodeType":"293","messageId":"294","endLine":12,"endColumn":52},{"ruleId":"291","severity":1,"message":"292","line":15,"column":14,"nodeType":"293","messageId":"294","endLine":15,"endColumn":67},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"295","line":50,"column":8,"nodeType":"275","endLine":50,"endColumn":10,"suggestions":"296"},{"ruleId":"279","severity":1,"message":"297","line":1,"column":8,"nodeType":"281","messageId":"282","endLine":1,"endColumn":15},{"ruleId":"279","severity":1,"message":"298","line":2,"column":10,"nodeType":"281","messageId":"282","endLine":2,"endColumn":16},{"ruleId":"273","severity":1,"message":"287","line":129,"column":8,"nodeType":"275","endLine":129,"endColumn":10,"suggestions":"299"},{"ruleId":"300","severity":1,"message":"301","line":254,"column":65,"nodeType":"302","messageId":"303","endLine":254,"endColumn":76,"fix":"304"},{"ruleId":"279","severity":1,"message":"305","line":2,"column":10,"nodeType":"281","messageId":"282","endLine":2,"endColumn":13},{"ruleId":"279","severity":1,"message":"306","line":2,"column":36,"nodeType":"281","messageId":"282","endLine":2,"endColumn":52},{"ruleId":"279","severity":1,"message":"307","line":2,"column":54,"nodeType":"281","messageId":"282","endLine":2,"endColumn":75},{"ruleId":"279","severity":1,"message":"308","line":2,"column":111,"nodeType":"281","messageId":"282","endLine":2,"endColumn":120},{"ruleId":"279","severity":1,"message":"309","line":2,"column":122,"nodeType":"281","messageId":"282","endLine":2,"endColumn":127},{"ruleId":"279","severity":1,"message":"310","line":2,"column":129,"nodeType":"281","messageId":"282","endLine":2,"endColumn":139},{"ruleId":"279","severity":1,"message":"311","line":19,"column":11,"nodeType":"281","messageId":"282","endLine":19,"endColumn":19},{"ruleId":"273","severity":1,"message":"312","line":71,"column":8,"nodeType":"275","endLine":71,"endColumn":14,"suggestions":"313"},{"ruleId":"314","severity":1,"message":"315","line":74,"column":18,"nodeType":"316","messageId":"317","endLine":74,"endColumn":20},{"ruleId":"314","severity":1,"message":"315","line":74,"column":39,"nodeType":"316","messageId":"317","endLine":74,"endColumn":41},{"ruleId":"273","severity":1,"message":"318","line":93,"column":8,"nodeType":"275","endLine":93,"endColumn":38,"suggestions":"319"},{"ruleId":"273","severity":1,"message":"277","line":93,"column":9,"nodeType":"320","endLine":93,"endColumn":37},{"ruleId":"279","severity":1,"message":"321","line":21,"column":21,"nodeType":"281","messageId":"282","endLine":21,"endColumn":31},{"ruleId":"279","severity":1,"message":"321","line":24,"column":21,"nodeType":"281","messageId":"282","endLine":24,"endColumn":31},"no-native-reassign",["322"],"no-negated-in-lhs",["323"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'filterManager' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["324"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","@typescript-eslint/no-unused-vars","'categories' is assigned a value but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'columnCategories.options' and 'snackbar'. Either include them or remove the dependency array.",["325"],["326"],["327"],"React Hook React.useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.",["328"],["329"],["330"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has a missing dependency: 'filterManager'. Either include it or remove the dependency array.",["331"],"'classes' is defined but never used.","'Button' is defined but never used.",["332"],"no-whitespace-before-property","Unexpected whitespace before property true.","MemberExpression","unexpectedWhitespace",{"range":"333","text":"334"},"'Box' is defined but never used.","'FormControlLabel' is defined but never used.","'FormControlLabelProps' is defined but never used.","'FormLabel' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'snackbar' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'freeSolo'. Either include it or remove the dependency array.",["335"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook React.useEffect has missing dependencies: 'freeSolo', 'open', 'props', and 'searchText'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["336"],"ConditionalExpression","'removeItem' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"337","fix":"341"},{"desc":"337","fix":"342"},{"desc":"343","fix":"344"},{"desc":"343","fix":"345"},{"desc":"343","fix":"346"},{"desc":"347","fix":"348"},{"desc":"343","fix":"349"},[9652,9654],".",{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},"Update the dependencies array to be: [debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",{"range":"354","text":"355"},"Update the dependencies array to be: [columnCategories.options, snackbar]",{"range":"356","text":"357"},{"range":"358","text":"355"},{"range":"359","text":"355"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"360","text":"361"},{"range":"362","text":"361"},{"range":"363","text":"361"},"Update the dependencies array to be: [filterManager]",{"range":"364","text":"365"},{"range":"366","text":"361"},"Update the dependencies array to be: [freeSolo, open]",{"range":"367","text":"368"},"Update the dependencies array to be: [freeSolo, open, props, searchText]",{"range":"369","text":"370"},[3188,3394],"[debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",[5790,5792],"[columnCategories.options, snackbar]",[6051,6257],[4689,4953],[2781,2783],"[id, reset, snackbar]",[3556,3558],[2865,2867],[1915,1917],"[filterManager]",[4110,4112],[2326,2332],"[freeSolo, open]",[2834,2864],"[freeSolo, open, props, searchText]"]