[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/components/Navbar/index.tsx":"4","/var/www/frontend/src/components/Navbar/Menu.tsx":"5","/var/www/frontend/src/components/Page.tsx":"6","/var/www/frontend/src/routes/AppRouter.tsx":"7","/var/www/frontend/src/routes/index.tsx":"8","/var/www/frontend/src/pages/Dashboard.tsx":"9","/var/www/frontend/src/components/Breadcrumbs.tsx":"10","/var/www/frontend/src/pages/category/PageList.tsx":"11","/var/www/frontend/src/pages/category/Table.tsx":"12","/var/www/frontend/src/util/http/index.ts":"13","/var/www/frontend/src/pages/genre/PageList.tsx":"14","/var/www/frontend/src/pages/genre/Table.tsx":"15","/var/www/frontend/src/pages/cast-member/PageList.tsx":"16","/var/www/frontend/src/pages/cast-member/Table.tsx":"17","/var/www/frontend/src/util/http/category-http.ts":"18","/var/www/frontend/src/util/http/http-resource.ts":"19","/var/www/frontend/src/pages/category/PageForm.tsx":"20","/var/www/frontend/src/pages/category/Form.tsx":"21","/var/www/frontend/src/pages/genre/PageForm.tsx":"22","/var/www/frontend/src/pages/genre/Form.tsx":"23","/var/www/frontend/src/util/http/genre-http.ts":"24","/var/www/frontend/src/pages/cast-member/PageForm.tsx":"25","/var/www/frontend/src/pages/cast-member/Form.tsx":"26","/var/www/frontend/src/util/http/cast-member-http.ts":"27","/var/www/frontend/src/theme.ts":"28","/var/www/frontend/src/components/Badge.tsx":"29","/var/www/frontend/src/util/vendor/yup.ts":"30","/var/www/frontend/src/components/SnackbarProvider.tsx":"31","/var/www/frontend/src/components/SubmitActions.tsx":"32","/var/www/frontend/src/components/DefaultForm.tsx":"33","/var/www/frontend/src/components/Table/index.tsx":"34","/var/www/frontend/src/components/Table/FilterResetButton.tsx":"35","/var/www/frontend/src/components/Table/DebouncedTableSearch.js":"36","/var/www/frontend/src/store/filter/index.ts":"37","/var/www/frontend/src/hooks/useFilter.ts":"38","/var/www/frontend/src/util/models.ts":"39"},{"size":500,"mtime":1608299870744,"results":"40","hashOfConfig":"41"},{"size":425,"mtime":1608299870744,"results":"42","hashOfConfig":"41"},{"size":921,"mtime":1613671900982,"results":"43","hashOfConfig":"41"},{"size":959,"mtime":1608323720178,"results":"44","hashOfConfig":"41"},{"size":1908,"mtime":1609186243854,"results":"45","hashOfConfig":"41"},{"size":658,"mtime":1608649921596,"results":"46","hashOfConfig":"41"},{"size":586,"mtime":1608584662648,"results":"47","hashOfConfig":"41"},{"size":2216,"mtime":1613673166275,"results":"48","hashOfConfig":"41"},{"size":252,"mtime":1608584424896,"results":"49","hashOfConfig":"41"},{"size":2369,"mtime":1609188477515,"results":"50","hashOfConfig":"41"},{"size":690,"mtime":1609186429182,"results":"51","hashOfConfig":"41"},{"size":5802,"mtime":1615251655694,"results":"52","hashOfConfig":"41"},{"size":125,"mtime":1608670477581,"results":"53","hashOfConfig":"41"},{"size":673,"mtime":1609186432222,"results":"54","hashOfConfig":"41"},{"size":9067,"mtime":1615251647317,"results":"55","hashOfConfig":"41"},{"size":706,"mtime":1609186424574,"results":"56","hashOfConfig":"41"},{"size":8041,"mtime":1615251773622,"results":"57","hashOfConfig":"41"},{"size":172,"mtime":1608734635707,"results":"58","hashOfConfig":"41"},{"size":1340,"mtime":1614791592776,"results":"59","hashOfConfig":"41"},{"size":400,"mtime":1613135072794,"results":"60","hashOfConfig":"41"},{"size":5387,"mtime":1614600901366,"results":"61","hashOfConfig":"41"},{"size":297,"mtime":1608754415311,"results":"62","hashOfConfig":"41"},{"size":6886,"mtime":1614776543979,"results":"63","hashOfConfig":"41"},{"size":162,"mtime":1608753416408,"results":"64","hashOfConfig":"41"},{"size":307,"mtime":1608754759253,"results":"65","hashOfConfig":"41"},{"size":5489,"mtime":1614601202156,"results":"66","hashOfConfig":"41"},{"size":178,"mtime":1608754723801,"results":"67","hashOfConfig":"41"},{"size":3466,"mtime":1614885420257,"results":"68","hashOfConfig":"41"},{"size":636,"mtime":1609187948724,"results":"69","hashOfConfig":"41"},{"size":394,"mtime":1614189140404,"results":"70","hashOfConfig":"41"},{"size":1453,"mtime":1613672722805,"results":"71","hashOfConfig":"41"},{"size":997,"mtime":1614364152842,"results":"72","hashOfConfig":"41"},{"size":830,"mtime":1614601814792,"results":"73","hashOfConfig":"41"},{"size":4416,"mtime":1614906079109,"results":"74","hashOfConfig":"41"},{"size":685,"mtime":1614792553803,"results":"75","hashOfConfig":"41"},{"size":3638,"mtime":1614805752532,"results":"76","hashOfConfig":"41"},{"size":2932,"mtime":1614879266745,"results":"77","hashOfConfig":"41"},{"size":8301,"mtime":1614886737879,"results":"78","hashOfConfig":"41"},{"size":1021,"mtime":1614883013638,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"105ko5q",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/var/www/frontend/src/index.tsx",[],["165","166"],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/var/www/frontend/src/components/Navbar/Menu.tsx",[],"/var/www/frontend/src/components/Page.tsx",[],"/var/www/frontend/src/routes/AppRouter.tsx",[],"/var/www/frontend/src/routes/index.tsx",[],"/var/www/frontend/src/pages/Dashboard.tsx",[],"/var/www/frontend/src/components/Breadcrumbs.tsx",[],"/var/www/frontend/src/pages/category/PageList.tsx",[],"/var/www/frontend/src/pages/category/Table.tsx",["167","168"],"/var/www/frontend/src/util/http/index.ts",[],"/var/www/frontend/src/pages/genre/PageList.tsx",[],"/var/www/frontend/src/pages/genre/Table.tsx",["169","170","171","172"],"/var/www/frontend/src/pages/cast-member/PageList.tsx",[],"/var/www/frontend/src/pages/cast-member/Table.tsx",["173","174","175"],"/var/www/frontend/src/util/http/category-http.ts",[],"/var/www/frontend/src/util/http/http-resource.ts",[],"/var/www/frontend/src/pages/category/PageForm.tsx",[],"/var/www/frontend/src/pages/category/Form.tsx",["176"],"import { Checkbox, FormControlLabel, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport { useForm } from \"react-hook-form\"\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { Category } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, is_active: boolean}>({resolver, defaultValues: {is_active: true}})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [category, setCategory] = React.useState<Category | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"is_active\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCategory(){\n            setLoading(true)\n            try{\n                const {data} = await categoryHttp.get(id)\n                if(isSubscribed){\n                    setCategory(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !category\n                ? categoryHttp.create(formData)\n                : categoryHttp.update(category.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Categoria salva com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/categories/${data.data.id}/edit`)\n                            : history.push(`/categories/${data.data.id}/edit`)\n                    ) : history.push('/categories')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar categoria',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <FormControlLabel\n            disabled={loading}\n            control={\n                <Checkbox\n                    name=\"is_active\"\n                    color={\"primary\"}\n                    onChange={\n                        () => setValue('is_active', !getValues()['is_active'])\n                    }\n                    checked={watch('is_active')}\n                    disabled={loading}\n                />\n            }\n            label={'Ativo?'}\n            labelPlacement={'end'}\n            />\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/pages/genre/PageForm.tsx",[],"/var/www/frontend/src/pages/genre/Form.tsx",["177"],"// @flow\nimport { Checkbox, MenuItem, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport { NestedValue, useForm } from 'react-hook-form';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport genreHttp from '../../util/http/genre-http';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { Category, Genre } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            categories_id: yup.array().label('Categorias').required().min(1)\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, categories_id: NestedValue<string[]>}>({resolver,\n        defaultValues: {\n            categories_id: []\n        }\n    })\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [genre, setGenre] = React.useState<Genre | null>(null)\n    const [categories, setCategories] = React.useState<Category[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"categories_id\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async function loadData(){\n            setLoading(true)\n            const promises = [categoryHttp.list({queryParams: {all: ''}})]\n            if(id){\n                promises.push(genreHttp.get(id))\n            }\n            try{\n                const [categoriesResponse, genreResponse] = await Promise.all(promises)\n                if(isSubscribed){\n                    setCategories(categoriesResponse.data.data)\n                    if(id){\n                        setGenre(genreResponse.data.data)\n                        const categories_id = genreResponse.data.data.categories.map(category => category.id)\n                        reset({\n                            ...genreResponse.data.data,\n                            categories_id\n                        })\n                    }\n                }\n\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !genre\n                ? genreHttp.create(formData)\n                : genreHttp.update(genre.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Gênero salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/genres/${data.data.id}/edit`)\n                            : history.push(`/genres/${data.data.id}/edit`)\n                    ) : history.push('/genres')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Gênero',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                select\n                name=\"categories_id\"\n                value={watch('categories_id')}\n                label=\"Categories\"\n                margin={'normal'}\n                variant={'outlined'}\n                fullWidth\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value)\n                }}\n                SelectProps={{\n                    multiple: true\n                }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n                helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{ shrink: true }}\n            >\n                <MenuItem value=\"\" disabled>\n                    <em>Selecione categorias</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category, key) => (\n                            <MenuItem key={key} value={category.id}>{category.name}</MenuItem>\n                        )\n                    )\n                }\n            </TextField>\n            <Checkbox\n                name=\"is_active\"\n                inputRef={register}\n                defaultChecked\n            />\n            Ativo?\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/genre-http.ts",[],"/var/www/frontend/src/pages/cast-member/PageForm.tsx",[],"/var/www/frontend/src/pages/cast-member/Form.tsx",["178"],"import { FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup, TextField } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { DefaultForm } from '../../components/DefaultForm';\nimport SubmitActions from '../../components/SubmitActions';\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember } from '../../util/models';\nimport * as yup from '../../util/vendor/yup'\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            type: yup.number().label('Tipo').required()\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, type: string}>({resolver})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [castMember, setCastMember] = React.useState<CastMember | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"type\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCastMember(){\n            setLoading(true)\n            try{\n                const {data} = await castMemberHttp.get(id)\n                if(isSubscribed){\n                    setCastMember(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !castMember\n                ? castMemberHttp.create(formData)\n                : castMemberHttp.update(castMember.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Membro de Elenco salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/cast-members/${data.data.id}/edit`)\n                            : history.push(`/cast-members/${data.data.id}/edit`)\n                    ) : history.push('/cast-members')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Membro de Elenco',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink: true }}\n            />\n            <FormControl\n                margin={\"normal\"}\n                error={errors.type !== undefined}\n                disabled={loading}\n            >\n                <FormLabel component=\"legend\">Tipo</FormLabel>\n                <RadioGroup\n                    name=\"type\"\n                    onChange={(e) => {\n                        setValue('type', parseInt(e.target.value))\n                    }}\n                    value={watch('type') + \"\"}\n                >\n                    <FormControlLabel value=\"1\" control={<Radio color={\"primary\"}/>} label=\"Diretor\"/>\n                    <FormControlLabel value=\"2\" control={<Radio color={\"primary\"}/>} label=\"Ator\"/>\n                </RadioGroup>\n                {\n                    errors.type && <FormHelperText id=\"type-helper-text\">{errors.type.message}</FormHelperText>\n                }\n            </FormControl>\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/cast-member-http.ts",[],"/var/www/frontend/src/theme.ts",[],"/var/www/frontend/src/components/Badge.tsx",[],"/var/www/frontend/src/util/vendor/yup.ts",["179","180","181","182"],"import { setLocale } from 'yup'\n\nconst ptBR = {\n    mixed: {\n        required: '${path} é requerido'\n    },\n    string: {\n        max: '${path} precisa ter no máximo ${max} caracteres'\n    },\n    number: {\n        min: '${path} precisa ser no mínimo ${min}'\n    },\n    array: {\n        min: 'Em ${path}, precisa escolher pelo menos ${min} item'\n    }\n}\n\nsetLocale(ptBR)\n\nexport * from 'yup'\n","/var/www/frontend/src/components/SnackbarProvider.tsx",[],"/var/www/frontend/src/components/SubmitActions.tsx",[],"/var/www/frontend/src/components/DefaultForm.tsx",[],"/var/www/frontend/src/components/Table/index.tsx",[],"/var/www/frontend/src/components/Table/FilterResetButton.tsx",[],"/var/www/frontend/src/components/Table/DebouncedTableSearch.js",[],["183","184"],"/var/www/frontend/src/store/filter/index.ts",[],"/var/www/frontend/src/hooks/useFilter.ts",["185"],"import { MUIDataTableColumn } from \"mui-datatables\";\nimport { Dispatch, MutableRefObject, Reducer, useEffect, useReducer, useState } from \"react\";\nimport * as yup from '../util/vendor/yup'\nimport reducer, { Creators } from \"../store/filter\";\nimport { Actions as FilterActions, State as FilterState} from \"../store/filter/types\";\nimport { useDebounce } from 'use-debounce'\nimport { useHistory } from \"react-router\";\nimport { History } from 'history'\nimport { isEqual } from 'lodash'\nimport { MuiDataTableRefComponent } from \"../components/Table\";\n\ninterface FilterManagerOptions {\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n    history: History;\n    tableRef: MutableRefObject<MuiDataTableRefComponent>\n    extraFilter?: ExtraFilter\n}\n\ninterface ExtraFilter {\n    getStateFromURL: (queryParams: URLSearchParams) => any,\n    formatSearchParams: (debouncedState: FilterState) => any,\n    createValidationSchema: () => any,\n}\n\ninterface UseFilterOptions extends Omit<FilterManagerOptions, 'history'>{\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n}\n\nexport default function useFilter(options: UseFilterOptions){\n    const history = useHistory()\n    const filterManager = new FilterManager({...options, history})\n    const INITIAL_STATE = filterManager.getStateFromURL()\n    const [filterState, dispatch] = useReducer<Reducer<FilterState, FilterActions>>(reducer, INITIAL_STATE);\n    const [debouncedFilterState] = useDebounce(filterState, options.debounceTime)\n    const [totalRecords, setTotalRecords] = useState<number>(0)\n\n    filterManager.state = filterState\n    filterManager.debouncedState = debouncedFilterState\n    filterManager.dispatch = dispatch\n    filterManager.applyOrderInColumns();\n\n    useEffect(() => {\n        filterManager.replaceHistory()\n    }, [])\n\n    return {\n        columns: filterManager.columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords\n    }\n}\n\nexport class FilterManager{\n    schema\n    state: FilterState = null as any;\n    debouncedState: FilterState = null as any;\n    dispatch: Dispatch<FilterActions> = null as any;\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    history: History\n    tableRef: MutableRefObject<MuiDataTableRefComponent>\n    extraFilter?: ExtraFilter\n\n    constructor(options: FilterManagerOptions){\n        const {columns, rowsPerPage, rowsPerPageOptions, history, tableRef, extraFilter } = options\n        this.columns = columns\n        this.rowsPerPage = rowsPerPage\n        this.rowsPerPageOptions = rowsPerPageOptions\n        this.history = history;\n        this.tableRef = tableRef;\n        this.extraFilter = extraFilter;\n        this.createValidationSchema()\n    }\n\n    private resetTablePagination(){\n        this.tableRef.current.changePage(0)\n        this.tableRef.current.changeRowsPerPage(this.rowsPerPage)\n    }\n\n    changeSearch(value) {\n        this.dispatch(Creators.setSearch({search: value}))\n    }\n\n    changePage(page) {\n        this.dispatch(Creators.setPage({page: page + 1}))\n    }\n\n    changeRowsPerPage(perPage){\n        this.dispatch(Creators.setPerPage({per_page: perPage}))\n    }\n\n    changeColumnSort(changedColumn: string, direction: string){\n        this.dispatch(Creators.setOrder({\n            sort: changedColumn,\n            dir: direction.includes('desc') ? 'desc' : 'asc'\n        }))\n        this.resetTablePagination()\n    }\n\n    changeExtraFilter(data){\n        this.dispatch(Creators.updateExtraFilter(data))\n    }\n\n    resetFilter(){\n        const INITIAL_STATE = {\n            ...this.schema.cast({}),\n            search: {value: null, update: true}\n        }\n        this.dispatch(Creators.setReset({\n            state: INITIAL_STATE\n        }))\n        this.resetTablePagination();\n    }\n\n    applyOrderInColumns(){\n        this.columns = this.columns.map(column => {\n            return column.name === this.state.order.sort ?\n            {\n                ...column,\n                options: {\n                    ...column.options,\n                    sortDirection: this.state.order.dir as any\n                }\n            } : column;\n        })\n    }\n\n    cleanSearchText(text){\n        let newText = text\n        if(text && text.value !== undefined){\n            newText = text.value\n        }\n        return newText\n    }\n\n    replaceHistory(){\n        this.history.replace({\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: this.debouncedState\n        })\n    }\n\n    pushHistory(){\n        const newLocation = {\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: {\n                ...this.debouncedState,\n                search: this.cleanSearchText(this.debouncedState.search)\n            }\n        }\n        const oldState = this.history.location.state\n        const nextState = this.debouncedState\n        if(isEqual(oldState, nextState)){\n            return\n        }\n        this.history.push(newLocation)\n    }\n\n    private formatSearchParams(){\n        const search = this.cleanSearchText(this.debouncedState.search)\n        return {\n            ...(search && search !== '' && {search: search}),\n            ...(this.debouncedState.pagination.page !== 1 && {page: this.debouncedState.pagination.page}),\n            ...(this.debouncedState.pagination.per_page !== 15 && {per_page: this.debouncedState.pagination.per_page}),\n            ...(\n                this.debouncedState.order.sort && {\n                    sort: this.debouncedState.order.sort,\n                    dir: this.debouncedState.order.dir\n                }\n            ),\n            ...(\n                this.extraFilter && this.extraFilter.formatSearchParams(this.debouncedState)\n            )\n        }\n    }\n\n    getStateFromURL(){\n        const queryParams = new URLSearchParams(this.history.location.search.substr(1))\n        return this.schema.cast({\n            search: queryParams.get('search'),\n            pagination: {\n                page: queryParams.get('page'),\n                per_page: queryParams.get('per_page')\n            },\n            order: {\n                sort: queryParams.get('sort'),\n                dir: queryParams.get('dir')\n            },\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.getStateFromURL(queryParams)\n                }\n            )\n        })\n    }\n\n    private createValidationSchema(){\n        this.schema = yup.object().shape({\n            search: yup.string()\n                .transform(value => !value ? undefined : value)\n                .default(''),\n            pagination: yup.object().shape({\n                page: yup.number()\n                    .transform(value => isNaN(value) || parseInt(value) < 1 ? undefined : value)\n                    .default(1),\n                per_page: yup.number()\n                    .transform(value => isNaN(value) || !this.rowsPerPageOptions.includes(parseInt(value)) ? undefined : value)\n                    .default(this.rowsPerPage),\n            }),\n            order: yup.object().shape({\n                sort: yup.string()\n                    .nullable()\n                    .transform(value => {\n                        const columnsName = this.columns\n                            .filter(column => !column.options || column.options.sort !== false)\n                            .map(column => column.name)\n                        return columnsName.includes(value) ? value : undefined\n                    })\n                    .default(null),\n                dir: yup.string()\n                    .nullable()\n                    .transform(value => !value || !['asc', 'desc'].includes(value.toLowerCase()) ? undefined : value)\n                    .default(null),\n            }),\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.createValidationSchema()\n                }\n            )\n        })\n    }\n}\n","/var/www/frontend/src/util/models.ts",[],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":107,"column":8,"nodeType":"192","endLine":112,"endColumn":6,"suggestions":"193"},{"ruleId":"190","severity":1,"message":"194","line":108,"column":9,"nodeType":"195","endLine":108,"endColumn":67},{"ruleId":"196","severity":1,"message":"197","line":104,"column":12,"nodeType":"198","messageId":"199","endLine":104,"endColumn":22},{"ruleId":"190","severity":1,"message":"200","line":173,"column":7,"nodeType":"192","endLine":173,"endColumn":9,"suggestions":"201"},{"ruleId":"190","severity":1,"message":"191","line":183,"column":8,"nodeType":"192","endLine":188,"endColumn":6,"suggestions":"202"},{"ruleId":"190","severity":1,"message":"194","line":184,"column":9,"nodeType":"195","endLine":184,"endColumn":67},{"ruleId":"190","severity":1,"message":"191","line":147,"column":8,"nodeType":"192","endLine":153,"endColumn":6,"suggestions":"203"},{"ruleId":"190","severity":1,"message":"194","line":148,"column":9,"nodeType":"195","endLine":148,"endColumn":67},{"ruleId":"190","severity":1,"message":"194","line":152,"column":9,"nodeType":"195","endLine":152,"endColumn":57},{"ruleId":"190","severity":1,"message":"204","line":91,"column":8,"nodeType":"192","endLine":91,"endColumn":10,"suggestions":"205"},{"ruleId":"190","severity":1,"message":"204","line":108,"column":8,"nodeType":"192","endLine":108,"endColumn":10,"suggestions":"206"},{"ruleId":"190","severity":1,"message":"204","line":92,"column":8,"nodeType":"192","endLine":92,"endColumn":10,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":5,"column":19,"nodeType":"210","messageId":"211","endLine":5,"endColumn":40},{"ruleId":"208","severity":1,"message":"209","line":8,"column":14,"nodeType":"210","messageId":"211","endLine":8,"endColumn":63},{"ruleId":"208","severity":1,"message":"209","line":11,"column":14,"nodeType":"210","messageId":"211","endLine":11,"endColumn":52},{"ruleId":"208","severity":1,"message":"209","line":14,"column":14,"nodeType":"210","messageId":"211","endLine":14,"endColumn":67},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"212","line":50,"column":8,"nodeType":"192","endLine":50,"endColumn":10,"suggestions":"213"},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'filterManager' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["216"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","@typescript-eslint/no-unused-vars","'categories' is assigned a value but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'columnCategories.options' and 'snackbar'. Either include them or remove the dependency array.",["217"],["218"],["219"],"React Hook React.useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.",["220"],["221"],["222"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has a missing dependency: 'filterManager'. Either include it or remove the dependency array.",["223"],"no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"224","fix":"228"},{"desc":"224","fix":"229"},{"desc":"230","fix":"231"},{"desc":"230","fix":"232"},{"desc":"230","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",{"range":"236","text":"237"},"Update the dependencies array to be: [columnCategories.options, snackbar]",{"range":"238","text":"239"},{"range":"240","text":"237"},{"range":"241","text":"237"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"242","text":"243"},{"range":"244","text":"243"},{"range":"245","text":"243"},"Update the dependencies array to be: [filterManager]",{"range":"246","text":"247"},[3188,3394],"[debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",[5790,5792],"[columnCategories.options, snackbar]",[6051,6257],[4689,4953],[2781,2783],"[id, reset, snackbar]",[3556,3558],[2865,2867],[1915,1917],"[filterManager]"]