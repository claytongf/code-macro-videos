[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/components/Navbar/index.tsx":"4","/var/www/frontend/src/components/Navbar/Menu.tsx":"5","/var/www/frontend/src/components/Page.tsx":"6","/var/www/frontend/src/routes/AppRouter.tsx":"7","/var/www/frontend/src/routes/index.tsx":"8","/var/www/frontend/src/pages/Dashboard.tsx":"9","/var/www/frontend/src/components/Breadcrumbs.tsx":"10","/var/www/frontend/src/pages/category/PageList.tsx":"11","/var/www/frontend/src/pages/category/Table.tsx":"12","/var/www/frontend/src/util/http/index.ts":"13","/var/www/frontend/src/pages/genre/PageList.tsx":"14","/var/www/frontend/src/pages/genre/Table.tsx":"15","/var/www/frontend/src/pages/cast-member/PageList.tsx":"16","/var/www/frontend/src/pages/cast-member/Table.tsx":"17","/var/www/frontend/src/util/http/category-http.ts":"18","/var/www/frontend/src/util/http/http-resource.ts":"19","/var/www/frontend/src/pages/category/PageForm.tsx":"20","/var/www/frontend/src/pages/category/Form.tsx":"21","/var/www/frontend/src/pages/genre/PageForm.tsx":"22","/var/www/frontend/src/pages/genre/Form.tsx":"23","/var/www/frontend/src/util/http/genre-http.ts":"24","/var/www/frontend/src/pages/cast-member/PageForm.tsx":"25","/var/www/frontend/src/pages/cast-member/Form.tsx":"26","/var/www/frontend/src/util/http/cast-member-http.ts":"27","/var/www/frontend/src/theme.ts":"28","/var/www/frontend/src/components/Badge.tsx":"29","/var/www/frontend/src/util/vendor/yup.ts":"30","/var/www/frontend/src/components/SnackbarProvider.tsx":"31","/var/www/frontend/src/components/SubmitActions.tsx":"32","/var/www/frontend/src/components/DefaultForm.tsx":"33","/var/www/frontend/src/components/Table/index.tsx":"34","/var/www/frontend/src/components/Table/FilterResetButton.tsx":"35","/var/www/frontend/src/components/Table/DebouncedTableSearch.js":"36","/var/www/frontend/src/store/filter/index.ts":"37","/var/www/frontend/src/hooks/useFilter.ts":"38","/var/www/frontend/src/util/models.ts":"39","/var/www/frontend/src/pages/video/PageForm.tsx":"40","/var/www/frontend/src/pages/video/PageList.tsx":"41","/var/www/frontend/src/util/http/video-http.ts":"42","/var/www/frontend/src/components/Rating.tsx":"43","/var/www/frontend/src/pages/video/Form/index.tsx":"44","/var/www/frontend/src/pages/video/Form/RatingField.tsx":"45","/var/www/frontend/src/components/InputFile.tsx":"46","/var/www/frontend/src/pages/video/Form/UploadField.tsx":"47","/var/www/frontend/src/components/AsyncAutocomplete.tsx":"48","/var/www/frontend/src/pages/video/Form/GenreField.tsx":"49","/var/www/frontend/src/pages/video/Form/CategoryField.tsx":"50","/var/www/frontend/src/hooks/useHttpHandled.ts":"51","/var/www/frontend/src/components/GridSelectedItem.tsx":"52","/var/www/frontend/src/components/GridSelected.tsx":"53","/var/www/frontend/src/hooks/useCollectionManager.ts":"54","/var/www/frontend/src/util/model-filters.ts":"55","/var/www/frontend/src/pages/video/Form/CastMemberField.tsx":"56","/var/www/frontend/src/hooks/useSnackbarFormError.ts":"57","/var/www/frontend/src/hooks/useDeleteCollection.ts":"58","/var/www/frontend/src/components/DeleteDialog.tsx":"59","/var/www/frontend/src/components/Spinner.tsx":"60","/var/www/frontend/src/components/loading/LoadingContext.tsx":"61","/var/www/frontend/src/pages/video/Table.tsx":"62","/var/www/frontend/src/components/loading/LoadingProvider.tsx":"63","/var/www/frontend/src/components/SnackbarUpload/index.tsx":"64","/var/www/frontend/src/components/SnackbarUpload/UploadItem.tsx":"65","/var/www/frontend/src/components/SnackbarUpload/UploadAction.tsx":"66","/var/www/frontend/src/pages/uploads/index.tsx":"67","/var/www/frontend/src/pages/uploads/UploadItem.tsx":"68","/var/www/frontend/src/pages/uploads/UploadAction.tsx":"69","/var/www/frontend/src/components/UploadProgress.tsx":"70"},{"size":500,"mtime":1608299870744,"results":"71","hashOfConfig":"72"},{"size":425,"mtime":1608299870744,"results":"73","hashOfConfig":"72"},{"size":1125,"mtime":1615486022677,"results":"74","hashOfConfig":"72"},{"size":959,"mtime":1608323720178,"results":"75","hashOfConfig":"72"},{"size":1963,"mtime":1615495416068,"results":"76","hashOfConfig":"72"},{"size":658,"mtime":1608649921596,"results":"77","hashOfConfig":"72"},{"size":586,"mtime":1608584662648,"results":"78","hashOfConfig":"72"},{"size":2961,"mtime":1615495322733,"results":"79","hashOfConfig":"72"},{"size":252,"mtime":1608584424896,"results":"80","hashOfConfig":"72"},{"size":2369,"mtime":1609188477515,"results":"81","hashOfConfig":"72"},{"size":649,"mtime":1615304516497,"results":"82","hashOfConfig":"72"},{"size":8106,"mtime":1615846868481,"results":"83","hashOfConfig":"72"},{"size":1173,"mtime":1615486967674,"results":"84","hashOfConfig":"72"},{"size":641,"mtime":1615304494249,"results":"85","hashOfConfig":"72"},{"size":11279,"mtime":1615846865937,"results":"86","hashOfConfig":"72"},{"size":674,"mtime":1615304522093,"results":"87","hashOfConfig":"72"},{"size":9606,"mtime":1615846871057,"results":"88","hashOfConfig":"72"},{"size":172,"mtime":1608734635707,"results":"89","hashOfConfig":"72"},{"size":2364,"mtime":1615473323354,"results":"90","hashOfConfig":"72"},{"size":400,"mtime":1613135072794,"results":"91","hashOfConfig":"72"},{"size":5419,"mtime":1615487848113,"results":"92","hashOfConfig":"72"},{"size":297,"mtime":1608754415311,"results":"93","hashOfConfig":"72"},{"size":6919,"mtime":1615488206800,"results":"94","hashOfConfig":"72"},{"size":162,"mtime":1608753416408,"results":"95","hashOfConfig":"72"},{"size":307,"mtime":1608754759253,"results":"96","hashOfConfig":"72"},{"size":5521,"mtime":1615488260210,"results":"97","hashOfConfig":"72"},{"size":178,"mtime":1608754723801,"results":"98","hashOfConfig":"72"},{"size":3466,"mtime":1614885420257,"results":"99","hashOfConfig":"72"},{"size":636,"mtime":1609187948724,"results":"100","hashOfConfig":"72"},{"size":435,"mtime":1615304289718,"results":"101","hashOfConfig":"72"},{"size":1485,"mtime":1615324826727,"results":"102","hashOfConfig":"72"},{"size":997,"mtime":1614364152842,"results":"103","hashOfConfig":"72"},{"size":830,"mtime":1614601814792,"results":"104","hashOfConfig":"72"},{"size":4401,"mtime":1615846874081,"results":"105","hashOfConfig":"72"},{"size":685,"mtime":1614792553803,"results":"106","hashOfConfig":"72"},{"size":3638,"mtime":1614805752532,"results":"107","hashOfConfig":"72"},{"size":2932,"mtime":1614879266745,"results":"108","hashOfConfig":"72"},{"size":8301,"mtime":1614886737879,"results":"109","hashOfConfig":"72"},{"size":1649,"mtime":1615405633236,"results":"110","hashOfConfig":"72"},{"size":342,"mtime":1615313096623,"results":"111","hashOfConfig":"72"},{"size":639,"mtime":1615479892503,"results":"112","hashOfConfig":"72"},{"size":162,"mtime":1615302183224,"results":"113","hashOfConfig":"72"},{"size":949,"mtime":1615314876955,"results":"114","hashOfConfig":"72"},{"size":16237,"mtime":1615907307788,"results":"115","hashOfConfig":"72"},{"size":2198,"mtime":1615405287321,"results":"116","hashOfConfig":"72"},{"size":2080,"mtime":1615399353169,"results":"117","hashOfConfig":"72"},{"size":2228,"mtime":1615406392818,"results":"118","hashOfConfig":"72"},{"size":3430,"mtime":1615406097123,"results":"119","hashOfConfig":"72"},{"size":3821,"mtime":1615463197068,"results":"120","hashOfConfig":"72"},{"size":3956,"mtime":1615485057244,"results":"121","hashOfConfig":"72"},{"size":597,"mtime":1615380846916,"results":"122","hashOfConfig":"72"},{"size":889,"mtime":1615386352207,"results":"123","hashOfConfig":"72"},{"size":726,"mtime":1615378591310,"results":"124","hashOfConfig":"72"},{"size":874,"mtime":1615379524899,"results":"125","hashOfConfig":"72"},{"size":240,"mtime":1615555208006,"results":"126","hashOfConfig":"72"},{"size":3267,"mtime":1615906655577,"results":"127","hashOfConfig":"72"},{"size":513,"mtime":1615471395355,"results":"128","hashOfConfig":"72"},{"size":528,"mtime":1615472925328,"results":"129","hashOfConfig":"72"},{"size":1068,"mtime":1615472344822,"results":"130","hashOfConfig":"72"},{"size":744,"mtime":1615487958374,"results":"131","hashOfConfig":"72"},{"size":116,"mtime":1615476465901,"results":"132","hashOfConfig":"72"},{"size":7622,"mtime":1615846864053,"results":"133","hashOfConfig":"72"},{"size":1642,"mtime":1615488527772,"results":"134","hashOfConfig":"72"},{"size":2609,"mtime":1615493042744,"results":"135","hashOfConfig":"72"},{"size":1677,"mtime":1615495934876,"results":"136","hashOfConfig":"72"},{"size":1509,"mtime":1615494380553,"results":"137","hashOfConfig":"72"},{"size":1993,"mtime":1615495954512,"results":"138","hashOfConfig":"72"},{"size":1539,"mtime":1615496068715,"results":"139","hashOfConfig":"72"},{"size":1814,"mtime":1615496546668,"results":"140","hashOfConfig":"72"},{"size":1019,"mtime":1615495515097,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"105ko5q",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"144"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"144"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"144"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"144"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"144"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"144"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"144"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"144"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"144"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"144"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"144"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"144"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"144"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"144"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"144"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"/var/www/frontend/src/index.tsx",[],["299","300"],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/var/www/frontend/src/components/Navbar/Menu.tsx",[],"/var/www/frontend/src/components/Page.tsx",[],"/var/www/frontend/src/routes/AppRouter.tsx",[],"/var/www/frontend/src/routes/index.tsx",[],"/var/www/frontend/src/pages/Dashboard.tsx",[],"/var/www/frontend/src/components/Breadcrumbs.tsx",[],"/var/www/frontend/src/pages/category/PageList.tsx",[],"/var/www/frontend/src/pages/category/Table.tsx",["301","302","303"],"import * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport categoryHttp from '../../util/http/category-http';\nimport { BadgeNo, BadgeYes } from '../../components/Badge';\nimport { Category, ListResponse } from '../../util/models';\nimport DefaultTable, {makeActionStyles ,TableColumn, MuiDataTableRefComponent} from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit'\nimport { FilterResetButton } from '../../components/Table/FilterResetButton';\nimport useFilter from '../../hooks/useFilter';\nimport useDeleteCollection from '../../hooks/useDeleteCollection';\nimport DeleteDialog from '../../components/DeleteDialog';\nimport LoadingContext from '../../components/loading/LoadingContext';\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            filterOptions: {\n                names: ['Sim', 'Não']\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return value ? <BadgeYes/> : <BadgeNo/>\n            }\n        },\n        width: '4%'\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst debounceTime = 300\nconst debounceSearchTime = 300\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const subscribed = React.useRef(true)\n    const [data, setData] = React.useState<Category[]>([])\n    const loading = React.useContext(LoadingContext)\n    const tableRef = React.useRef() as React.MutableRefObject<MuiDataTableRefComponent>\n    const {openDeleteDialog, setOpenDeleteDialog, rowsToDelete, setRowsToDelete } = useDeleteCollection();\n\n    const {columns, filterManager, filterState, debouncedFilterState, totalRecords, setTotalRecords} = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef\n    })\n\n    React.useEffect(() => {\n        subscribed.current = true\n        filterManager.pushHistory()\n        getData()\n        return () => {\n            subscribed.current = false\n            //executado quando componente estiver desmontado\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ])\n\n    async function getData(){\n        try{\n            const {data} = await categoryHttp.list<ListResponse<Category>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.is_active &&\n                        {is_active: debouncedFilterState.extraFilter.is_active === 'Sim' ? 1 : 0}\n                    )\n                }\n            })\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n                if(openDeleteDialog){\n                    setOpenDeleteDialog(false)\n                }\n            }\n        } catch(error){\n            console.error(error);\n            if(categoryHttp.isCancelledRequest(error)){\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    function deleteRows(confirmed: boolean){\n        if(!confirmed){\n            setOpenDeleteDialog(false);\n            return;\n        }\n        const ids = rowsToDelete\n            .data\n            .map(value => data[value.index].id)\n            .join(',');\n        categoryHttp\n            .deleteCollection({ids})\n            .then(response => {\n                snackbar.enqueueSnackbar(\n                    'Registros excluídos com sucesso', {variant: 'success'}\n                )\n                if(rowsToDelete.data.length === filterState.pagination.per_page && filterState.pagination.page > 1){\n                    const page = filterState.pagination.page - 2;\n                    filterManager.changePage(page)\n                }else{\n                    getData()\n                }\n            })\n            .catch((error) => {\n                console.error(error)\n                snackbar.enqueueSnackbar(\n                    'Não foi possível excluir os registros', {variant: 'error'}\n                )\n            })\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n\n            <DeleteDialog open={openDeleteDialog} handleClose={deleteRows}/>\n            <DefaultTable\n                title=\"Listagem de categorias\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debounceSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSide: true,\n                    responsive: 'vertical',\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column: any, filterList) => {\n                        const columnIndex = columns.findIndex(c => c.name === column)\n                        filterManager.changeExtraFilter({\n                            [column]: filterList[columnIndex].length ? filterList[columnIndex][0] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => filterManager.resetFilter()}/> //default\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) => filterManager.changeColumnSort(changedColumn, direction),\n                    onRowsDelete: (rowsDeleted) => {\n                        setRowsToDelete(rowsDeleted as any);\n                        return false;\n                    }\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/util/http/index.ts",[],"/var/www/frontend/src/pages/genre/PageList.tsx",[],"/var/www/frontend/src/pages/genre/Table.tsx",["304","305","306","307","308"],"import { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport genreHttp from '../../util/http/genre-http';\nimport { Category, Genre, ListResponse } from '../../util/models';\nimport DefaultTable, { makeActionStyles, MuiDataTableRefComponent, TableColumn } from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport EditIcon from '@material-ui/icons/Edit'\nimport { Link } from 'react-router-dom';\nimport * as yup from '../../util/vendor/yup'\nimport useFilter from '../../hooks/useFilter';\nimport { FilterResetButton } from '../../components/Table/FilterResetButton';\nimport categoryHttp from '../../util/http/category-http';\nimport { BadgeNo, BadgeYes } from '../../components/Badge';\nimport DeleteDialog from '../../components/DeleteDialog';\nimport useDeleteCollection from '../../hooks/useDeleteCollection';\nimport LoadingContext from '../../components/loading/LoadingContext';\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '27%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: '16%',\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        options: {\n            filterType: 'multiselect',\n            filterOptions: {\n                names: []\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return value.map((value: any) => value.name).join(\", \")\n            }\n        },\n        width: '30%'\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            filterOptions: {\n                names: ['Sim', 'Não']\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return value ? <BadgeYes/> : <BadgeNo/>\n            }\n        },\n        width: \"4%\"\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        },\n        width: \"10%\"\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst debounceTime = 300\nconst debounceSearchTime = 300\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const subscribed = React.useRef(true)\n    const [data, setData] = React.useState<Genre[]>([])\n    const loading = React.useContext(LoadingContext)\n    const [categories, setCategories] = React.useState<Category[]>()\n    const tableRef = React.useRef() as React.MutableRefObject<MuiDataTableRefComponent>\n    const {openDeleteDialog, setOpenDeleteDialog, rowsToDelete, setRowsToDelete } = useDeleteCollection();\n\n    const {columns, filterManager, filterState, debouncedFilterState, totalRecords, setTotalRecords} = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    categories: yup.mixed()\n                        .nullable()\n                        .transform(value => {\n                            return !value || value === '' ? undefined : value.split(',');\n                        })\n                        .default(null)\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter\n                ? {\n                    ...(\n                        debouncedState.extraFilter.categories &&\n                        {categories: debouncedState.extraFilter.categories.join(',')}\n                    )\n                }\n                : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    categories: queryParams.get('categories')\n                }\n            }\n        }\n    })\n\n    const indexColumnCategories = columns.findIndex(c => c.name === 'categories')\n    const columnCategories = columns[indexColumnCategories]\n    const categoriesFilterValue = filterState.extraFilter && filterState.extraFilter.categories;\n    (columnCategories.options as any).filterList = categoriesFilterValue ? categoriesFilterValue : []\n\n    const serverSideFilterList = columns.map(column => [])\n    if(categoriesFilterValue){\n        serverSideFilterList[indexColumnCategories] = categoriesFilterValue\n    }\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async () => {\n            try {\n                const {data} = await categoryHttp.list({queryParams: {all: ''}})\n                if (isSubscribed) {\n                    setCategories(data.data);\n                    (columnCategories.options as any).filterOptions.names = data.data.map(category => category.name)\n                }\n            } catch (error) {\n                console.error(error)\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }\n            return () => {\n                 isSubscribed = false;\n                //executado quando componente estiver desmontado\n            }\n        })();\n    },[])\n\n    React.useEffect(() => {\n        subscribed.current = true\n        filterManager.pushHistory()\n        getData()\n        return () => {\n            subscribed.current = false\n            //executado quando componente estiver desmontado\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ])\n\n    async function getData(){\n        try{\n            const {data} = await genreHttp.list<ListResponse<Genre>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.categories &&\n                        {categories: debouncedFilterState.extraFilter.categories.join(\",\")}\n                    ),\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.is_active &&\n                        {is_active: debouncedFilterState.extraFilter.is_active[0] === 'Sim' ? 1 : 0}\n                    )\n                }\n            })\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n                if(openDeleteDialog){\n                    setOpenDeleteDialog(false)\n                }\n            }\n        } catch (error) {\n            console.error(error);\n            if(genreHttp.isCancelledRequest(error)){\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    function deleteRows(confirmed: boolean){\n        if(!confirmed){\n            setOpenDeleteDialog(false);\n            return;\n        }\n        const ids = rowsToDelete\n            .data\n            .map(value => data[value.index].id)\n            .join(',');\n        genreHttp\n            .deleteCollection({ids})\n            .then(response => {\n                snackbar.enqueueSnackbar(\n                    'Registros excluídos com sucesso', {variant: 'success'}\n                )\n                if(rowsToDelete.data.length === filterState.pagination.per_page && filterState.pagination.page > 1){\n                    const page = filterState.pagination.page - 2;\n                    filterManager.changePage(page)\n                }else{\n                    getData()\n                }\n            })\n            .catch((error) => {\n                console.error(error)\n                snackbar.enqueueSnackbar(\n                    'Não foi possível excluir os registros', {variant: 'error'}\n                )\n            })\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DeleteDialog open={openDeleteDialog} handleClose={deleteRows}/>\n            <DefaultTable\n                title=\"Listagem de gêneros\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debounceSearchTime}\n                ref={tableRef}\n                options={{\n                    // serverSideFilterList,\n                    serverSide: true,\n                    responsive: 'vertical',\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column: any, filterList) => {\n                        const columnIndex = columns.findIndex(c => c.name === column)\n                        filterManager.changeExtraFilter({\n                            [column]: filterList[columnIndex].length ? filterList[columnIndex] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => filterManager.resetFilter()}/> //default\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) => filterManager.changeColumnSort(changedColumn, direction),\n                    onRowsDelete: (rowsDeleted) => {\n                        setRowsToDelete(rowsDeleted as any);\n                        return false;\n                    }\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/pages/cast-member/PageList.tsx",[],"/var/www/frontend/src/pages/cast-member/Table.tsx",["309","310","311"],"import * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember, ListResponse, CastMemberTypeMap } from '../../util/models';\nimport DefaultTable, { makeActionStyles, MuiDataTableRefComponent, TableColumn } from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit'\nimport * as yup from '../../util/vendor/yup'\nimport useFilter from '../../hooks/useFilter';\nimport { FilterResetButton } from '../../components/Table/FilterResetButton';\nimport { invert } from 'lodash';\nimport DeleteDialog from '../../components/DeleteDialog';\nimport useDeleteCollection from '../../hooks/useDeleteCollection';\nimport LoadingContext from '../../components/loading/LoadingContext';\n\nconst castMemberNames = Object.values(CastMemberTypeMap)\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"type\",\n        label: \"Tipo\",\n        options: {\n            filterOptions: {\n                names: castMemberNames\n            },\n            customBodyRender(value, tableMeta, updateValue){\n                return CastMemberTypeMap[value]\n            }\n        },\n        width: \"4%\"\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        },\n        width: '10%',\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst debounceTime = 300\nconst debounceSearchTime = 300\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const subscribed = React.useRef(true)\n    const [data, setData] = React.useState<CastMember[]>([])\n    const loading = React.useContext(LoadingContext)\n    const {openDeleteDialog, setOpenDeleteDialog, rowsToDelete, setRowsToDelete } = useDeleteCollection();\n    const tableRef = React.useRef() as React.MutableRefObject<MuiDataTableRefComponent>\n\n    const {columns, filterManager, filterState, debouncedFilterState, totalRecords, setTotalRecords} = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    type: yup.string()\n                        .nullable()\n                        .transform(value => {\n                            return !value || !castMemberNames.includes(value) ? undefined : value;\n                        })\n                        .default(null)\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter\n                ? {\n                    ...(\n                        debouncedState.extraFilter.type &&\n                        {type: debouncedState.extraFilter.type}\n                    )\n                }\n                : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    type: queryParams.get('type')\n                }\n            }\n        }\n    })\n\n    const indexColumnType = columns.findIndex(c => c.name === 'type')\n    const columnType = columns[indexColumnType]\n    const typeFilterValue = filterState.extraFilter && filterState.extraFilter.type as never;\n    (columnType.options as any).filterList = typeFilterValue ? [typeFilterValue] : []\n\n    const serverSideFilterList = columns.map(column => [])\n    if(typeFilterValue){\n        serverSideFilterList[indexColumnType] = [typeFilterValue]\n    }\n\n    React.useEffect(() => {\n        subscribed.current = true\n        filterManager.pushHistory()\n        getData()\n        return () => {\n            subscribed.current = false\n            //executado quando componente estiver desmontado\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ])\n\n    async function getData(){\n        try{\n            const {data} = await castMemberHttp.list<ListResponse<CastMember>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.type &&\n                        {type: invert(CastMemberTypeMap)[debouncedFilterState.extraFilter.type]}\n                    )\n                }\n            })\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n                if(openDeleteDialog){\n                    setOpenDeleteDialog(false)\n                }\n            }\n        } catch (error) {\n            console.error(error);\n            if(castMemberHttp.isCancelledRequest(error)){\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    function deleteRows(confirmed: boolean){\n        if(!confirmed){\n            setOpenDeleteDialog(false);\n            return;\n        }\n        const ids = rowsToDelete\n            .data\n            .map(value => data[value.index].id)\n            .join(',');\n        castMemberHttp\n            .deleteCollection({ids})\n            .then(response => {\n                snackbar.enqueueSnackbar(\n                    'Registros excluídos com sucesso', {variant: 'success'}\n                )\n                if(rowsToDelete.data.length === filterState.pagination.per_page && filterState.pagination.page > 1){\n                    const page = filterState.pagination.page - 2;\n                    filterManager.changePage(page)\n                }else{\n                    getData()\n                }\n            })\n            .catch((error) => {\n                console.error(error)\n                snackbar.enqueueSnackbar(\n                    'Não foi possível excluir os registros', {variant: 'error'}\n                )\n            })\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DeleteDialog open={openDeleteDialog} handleClose={deleteRows}/>\n            <DefaultTable\n                title=\"Listagem de membros\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debounceSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSide: true,\n                    responsive: 'vertical',\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column: any, filterList) => {\n                        const columnIndex = columns.findIndex(c => c.name === column)\n                        filterManager.changeExtraFilter({\n                            [column]: filterList[columnIndex].length ? filterList[columnIndex][0] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => filterManager.resetFilter()}/> //default\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) => filterManager.changeColumnSort(changedColumn, direction),\n                    onRowsDelete: (rowsDeleted) => {\n                        setRowsToDelete(rowsDeleted as any);\n                        return false;\n                    }\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/util/http/category-http.ts",[],"/var/www/frontend/src/util/http/http-resource.ts",[],"/var/www/frontend/src/pages/category/PageForm.tsx",[],"/var/www/frontend/src/pages/category/Form.tsx",["312"],"import { Checkbox, FormControlLabel, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport { useForm } from \"react-hook-form\"\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { Category } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\nimport useSnackbarFormError from '../../hooks/useSnackbarFormError';\nimport LoadingContext from '../../components/loading/LoadingContext';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch, formState} = useForm<{name: string, is_active: boolean}>({resolver, defaultValues: {is_active: true}})\n\n    useSnackbarFormError(formState.submitCount, errors)\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [category, setCategory] = React.useState<Category | null>(null)\n    const loading = React.useContext(LoadingContext)\n\n    React.useEffect(() => {\n        register({name: \"is_active\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCategory(){\n            try{\n                const {data} = await categoryHttp.get(id)\n                if(isSubscribed){\n                    setCategory(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        try {\n            const http = !category\n                ? categoryHttp.create(formData)\n                : categoryHttp.update(category.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Categoria salva com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/categories/${data.data.id}/edit`)\n                            : history.push(`/categories/${data.data.id}/edit`)\n                    ) : history.push('/categories')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar categoria',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <FormControlLabel\n            disabled={loading}\n            control={\n                <Checkbox\n                    name=\"is_active\"\n                    color={\"primary\"}\n                    onChange={\n                        () => setValue('is_active', !getValues()['is_active'])\n                    }\n                    checked={watch('is_active')}\n                    disabled={loading}\n                />\n            }\n            label={'Ativo?'}\n            labelPlacement={'end'}\n            />\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/pages/genre/PageForm.tsx",[],"/var/www/frontend/src/pages/genre/Form.tsx",["313"],"// @flow\nimport { Checkbox, MenuItem, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport { NestedValue, useForm } from 'react-hook-form';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport genreHttp from '../../util/http/genre-http';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { Category, Genre } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\nimport useSnackbarFormError from '../../hooks/useSnackbarFormError';\nimport LoadingContext from '../../components/loading/LoadingContext';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            categories_id: yup.array().label('Categorias').required().min(1)\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch, formState} = useForm<{name: string, categories_id: NestedValue<string[]>}>({resolver,\n        defaultValues: {\n            categories_id: []\n        }\n    })\n\n    useSnackbarFormError(formState.submitCount, errors)\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [genre, setGenre] = React.useState<Genre | null>(null)\n    const [categories, setCategories] = React.useState<Category[]>([])\n    const loading = React.useContext(LoadingContext)\n\n    React.useEffect(() => {\n        register({name: \"categories_id\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async function loadData(){\n            const promises = [categoryHttp.list({queryParams: {all: ''}})]\n            if(id){\n                promises.push(genreHttp.get(id))\n            }\n            try{\n                const [categoriesResponse, genreResponse] = await Promise.all(promises)\n                if(isSubscribed){\n                    setCategories(categoriesResponse.data.data)\n                    if(id){\n                        setGenre(genreResponse.data.data)\n                        const categories_id = genreResponse.data.data.categories.map(category => category.id)\n                        reset({\n                            ...genreResponse.data.data,\n                            categories_id\n                        })\n                    }\n                }\n\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        try {\n            const http = !genre\n                ? genreHttp.create(formData)\n                : genreHttp.update(genre.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Gênero salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/genres/${data.data.id}/edit`)\n                            : history.push(`/genres/${data.data.id}/edit`)\n                    ) : history.push('/genres')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Gênero',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                select\n                name=\"categories_id\"\n                value={watch('categories_id')}\n                label=\"Categories\"\n                margin={'normal'}\n                variant={'outlined'}\n                fullWidth\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value)\n                }}\n                SelectProps={{\n                    multiple: true\n                }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n                helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{ shrink: true }}\n            >\n                <MenuItem value=\"\" disabled>\n                    <em>Selecione categorias</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category, key) => (\n                            <MenuItem key={key} value={category.id}>{category.name}</MenuItem>\n                        )\n                    )\n                }\n            </TextField>\n            <Checkbox\n                name=\"is_active\"\n                inputRef={register}\n                defaultChecked\n            />\n            Ativo?\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/genre-http.ts",[],"/var/www/frontend/src/pages/cast-member/PageForm.tsx",[],"/var/www/frontend/src/pages/cast-member/Form.tsx",["314"],"import { FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup, TextField } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { DefaultForm } from '../../components/DefaultForm';\nimport LoadingContext from '../../components/loading/LoadingContext';\nimport SubmitActions from '../../components/SubmitActions';\nimport useSnackbarFormError from '../../hooks/useSnackbarFormError';\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember } from '../../util/models';\nimport * as yup from '../../util/vendor/yup'\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            type: yup.number().label('Tipo').required()\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch, formState} = useForm<{name: string, type: string}>({resolver})\n\n    useSnackbarFormError(formState.submitCount, errors)\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [castMember, setCastMember] = React.useState<CastMember | null>(null)\n    const loading = React.useContext(LoadingContext)\n\n    React.useEffect(() => {\n        register({name: \"type\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCastMember(){\n            try{\n                const {data} = await castMemberHttp.get(id)\n                if(isSubscribed){\n                    setCastMember(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        try {\n            const http = !castMember\n                ? castMemberHttp.create(formData)\n                : castMemberHttp.update(castMember.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Membro de Elenco salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/cast-members/${data.data.id}/edit`)\n                            : history.push(`/cast-members/${data.data.id}/edit`)\n                    ) : history.push('/cast-members')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Membro de Elenco',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink: true }}\n            />\n            <FormControl\n                margin={\"normal\"}\n                error={errors.type !== undefined}\n                disabled={loading}\n            >\n                <FormLabel component=\"legend\">Tipo</FormLabel>\n                <RadioGroup\n                    name=\"type\"\n                    onChange={(e) => {\n                        setValue('type', parseInt(e.target.value))\n                    }}\n                    value={watch('type') + \"\"}\n                >\n                    <FormControlLabel value=\"1\" control={<Radio color={\"primary\"}/>} label=\"Diretor\"/>\n                    <FormControlLabel value=\"2\" control={<Radio color={\"primary\"}/>} label=\"Ator\"/>\n                </RadioGroup>\n                {\n                    errors.type && <FormHelperText id=\"type-helper-text\">{errors.type.message}</FormHelperText>\n                }\n            </FormControl>\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/cast-member-http.ts",[],"/var/www/frontend/src/theme.ts",[],"/var/www/frontend/src/components/Badge.tsx",[],"/var/www/frontend/src/util/vendor/yup.ts",["315","316","317","318","319"],"import { setLocale } from 'yup'\n\nconst ptBR = {\n    mixed: {\n        required: '${path} é requerido',\n        notType: '${path} é inválido'\n    },\n    string: {\n        max: '${path} precisa ter no máximo ${max} caracteres'\n    },\n    number: {\n        min: '${path} precisa ser no mínimo ${min}'\n    },\n    array: {\n        min: 'Em ${path}, precisa escolher pelo menos ${min} item'\n    }\n}\n\nsetLocale(ptBR)\n\nexport * from 'yup'\n","/var/www/frontend/src/components/SnackbarProvider.tsx",[],"/var/www/frontend/src/components/SubmitActions.tsx",[],"/var/www/frontend/src/components/DefaultForm.tsx",[],"/var/www/frontend/src/components/Table/index.tsx",[],"/var/www/frontend/src/components/Table/FilterResetButton.tsx",[],"/var/www/frontend/src/components/Table/DebouncedTableSearch.js",[],["320","321"],"/var/www/frontend/src/store/filter/index.ts",[],"/var/www/frontend/src/hooks/useFilter.ts",["322"],"import { MUIDataTableColumn } from \"mui-datatables\";\nimport { Dispatch, MutableRefObject, Reducer, useEffect, useReducer, useState } from \"react\";\nimport * as yup from '../util/vendor/yup'\nimport reducer, { Creators } from \"../store/filter\";\nimport { Actions as FilterActions, State as FilterState} from \"../store/filter/types\";\nimport { useDebounce } from 'use-debounce'\nimport { useHistory } from \"react-router\";\nimport { History } from 'history'\nimport { isEqual } from 'lodash'\nimport { MuiDataTableRefComponent } from \"../components/Table\";\n\ninterface FilterManagerOptions {\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n    history: History;\n    tableRef: MutableRefObject<MuiDataTableRefComponent>\n    extraFilter?: ExtraFilter\n}\n\ninterface ExtraFilter {\n    getStateFromURL: (queryParams: URLSearchParams) => any,\n    formatSearchParams: (debouncedState: FilterState) => any,\n    createValidationSchema: () => any,\n}\n\ninterface UseFilterOptions extends Omit<FilterManagerOptions, 'history'>{\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n}\n\nexport default function useFilter(options: UseFilterOptions){\n    const history = useHistory()\n    const filterManager = new FilterManager({...options, history})\n    const INITIAL_STATE = filterManager.getStateFromURL()\n    const [filterState, dispatch] = useReducer<Reducer<FilterState, FilterActions>>(reducer, INITIAL_STATE);\n    const [debouncedFilterState] = useDebounce(filterState, options.debounceTime)\n    const [totalRecords, setTotalRecords] = useState<number>(0)\n\n    filterManager.state = filterState\n    filterManager.debouncedState = debouncedFilterState\n    filterManager.dispatch = dispatch\n    filterManager.applyOrderInColumns();\n\n    useEffect(() => {\n        filterManager.replaceHistory()\n    }, [])\n\n    return {\n        columns: filterManager.columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords\n    }\n}\n\nexport class FilterManager{\n    schema\n    state: FilterState = null as any;\n    debouncedState: FilterState = null as any;\n    dispatch: Dispatch<FilterActions> = null as any;\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    history: History\n    tableRef: MutableRefObject<MuiDataTableRefComponent>\n    extraFilter?: ExtraFilter\n\n    constructor(options: FilterManagerOptions){\n        const {columns, rowsPerPage, rowsPerPageOptions, history, tableRef, extraFilter } = options\n        this.columns = columns\n        this.rowsPerPage = rowsPerPage\n        this.rowsPerPageOptions = rowsPerPageOptions\n        this.history = history;\n        this.tableRef = tableRef;\n        this.extraFilter = extraFilter;\n        this.createValidationSchema()\n    }\n\n    private resetTablePagination(){\n        this.tableRef.current.changePage(0)\n        this.tableRef.current.changeRowsPerPage(this.rowsPerPage)\n    }\n\n    changeSearch(value) {\n        this.dispatch(Creators.setSearch({search: value}))\n    }\n\n    changePage(page) {\n        this.dispatch(Creators.setPage({page: page + 1}))\n    }\n\n    changeRowsPerPage(perPage){\n        this.dispatch(Creators.setPerPage({per_page: perPage}))\n    }\n\n    changeColumnSort(changedColumn: string, direction: string){\n        this.dispatch(Creators.setOrder({\n            sort: changedColumn,\n            dir: direction.includes('desc') ? 'desc' : 'asc'\n        }))\n        this.resetTablePagination()\n    }\n\n    changeExtraFilter(data){\n        this.dispatch(Creators.updateExtraFilter(data))\n    }\n\n    resetFilter(){\n        const INITIAL_STATE = {\n            ...this.schema.cast({}),\n            search: {value: null, update: true}\n        }\n        this.dispatch(Creators.setReset({\n            state: INITIAL_STATE\n        }))\n        this.resetTablePagination();\n    }\n\n    applyOrderInColumns(){\n        this.columns = this.columns.map(column => {\n            return column.name === this.state.order.sort ?\n            {\n                ...column,\n                options: {\n                    ...column.options,\n                    sortDirection: this.state.order.dir as any\n                }\n            } : column;\n        })\n    }\n\n    cleanSearchText(text){\n        let newText = text\n        if(text && text.value !== undefined){\n            newText = text.value\n        }\n        return newText\n    }\n\n    replaceHistory(){\n        this.history.replace({\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: this.debouncedState\n        })\n    }\n\n    pushHistory(){\n        const newLocation = {\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: {\n                ...this.debouncedState,\n                search: this.cleanSearchText(this.debouncedState.search)\n            }\n        }\n        const oldState = this.history.location.state\n        const nextState = this.debouncedState\n        if(isEqual(oldState, nextState)){\n            return\n        }\n        this.history.push(newLocation)\n    }\n\n    private formatSearchParams(){\n        const search = this.cleanSearchText(this.debouncedState.search)\n        return {\n            ...(search && search !== '' && {search: search}),\n            ...(this.debouncedState.pagination.page !== 1 && {page: this.debouncedState.pagination.page}),\n            ...(this.debouncedState.pagination.per_page !== 15 && {per_page: this.debouncedState.pagination.per_page}),\n            ...(\n                this.debouncedState.order.sort && {\n                    sort: this.debouncedState.order.sort,\n                    dir: this.debouncedState.order.dir\n                }\n            ),\n            ...(\n                this.extraFilter && this.extraFilter.formatSearchParams(this.debouncedState)\n            )\n        }\n    }\n\n    getStateFromURL(){\n        const queryParams = new URLSearchParams(this.history.location.search.substr(1))\n        return this.schema.cast({\n            search: queryParams.get('search'),\n            pagination: {\n                page: queryParams.get('page'),\n                per_page: queryParams.get('per_page')\n            },\n            order: {\n                sort: queryParams.get('sort'),\n                dir: queryParams.get('dir')\n            },\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.getStateFromURL(queryParams)\n                }\n            )\n        })\n    }\n\n    private createValidationSchema(){\n        this.schema = yup.object().shape({\n            search: yup.string()\n                .transform(value => !value ? undefined : value)\n                .default(''),\n            pagination: yup.object().shape({\n                page: yup.number()\n                    .transform(value => isNaN(value) || parseInt(value) < 1 ? undefined : value)\n                    .default(1),\n                per_page: yup.number()\n                    .transform(value => isNaN(value) || !this.rowsPerPageOptions.includes(parseInt(value)) ? undefined : value)\n                    .default(this.rowsPerPage),\n            }),\n            order: yup.object().shape({\n                sort: yup.string()\n                    .nullable()\n                    .transform(value => {\n                        const columnsName = this.columns\n                            .filter(column => !column.options || column.options.sort !== false)\n                            .map(column => column.name)\n                        return columnsName.includes(value) ? value : undefined\n                    })\n                    .default(null),\n                dir: yup.string()\n                    .nullable()\n                    .transform(value => !value || !['asc', 'desc'].includes(value.toLowerCase()) ? undefined : value)\n                    .default(null),\n            }),\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.createValidationSchema()\n                }\n            )\n        })\n    }\n}\n","/var/www/frontend/src/util/models.ts",[],"/var/www/frontend/src/pages/video/PageForm.tsx",[],"/var/www/frontend/src/pages/video/PageList.tsx",[],"/var/www/frontend/src/util/http/video-http.ts",[],"/var/www/frontend/src/components/Rating.tsx",[],"/var/www/frontend/src/pages/video/Form/index.tsx",["323"],"/var/www/frontend/src/pages/video/Form/RatingField.tsx",[],"/var/www/frontend/src/components/InputFile.tsx",[],"/var/www/frontend/src/pages/video/Form/UploadField.tsx",[],"/var/www/frontend/src/components/AsyncAutocomplete.tsx",["324","325"],"import { CircularProgress, TextField, TextFieldProps } from '@material-ui/core';\nimport { Autocomplete, AutocompleteProps } from '@material-ui/lab';\nimport * as React from 'react';\nimport { useDebounce } from 'use-debounce/lib';\n\ninterface AsyncAutocompleteProps {\n    fetchOptions: (searchText) => Promise<any>\n    debounceTime?: number;\n    TextFieldProps?: TextFieldProps\n    AutocompleteProps?: Omit<AutocompleteProps<any, any, any, any>, 'renderInput' | 'options'>\n}\n\nexport interface AsyncAutocompleteComponent {\n    clear: () => void\n}\n\nconst AsyncAutocomplete = React.forwardRef<AsyncAutocompleteComponent, AsyncAutocompleteProps>((props, ref) => {\n    const {AutocompleteProps, debounceTime = 300} = props;\n    const {freeSolo = false, onOpen, onClose, onInputChange} = AutocompleteProps as any;\n    const [open, setOpen] = React.useState(false)\n    const [searchText, setSearchText] = React.useState(\"\")\n    const [debouncedSearchText] = useDebounce(searchText, debounceTime)\n    const [loading, setLoading] = React.useState(false)\n    const [options, setOptions] = React.useState([])\n\n    const textFieldProps: TextFieldProps = {\n        margin: 'normal',\n        variant: 'outlined',\n        fullWidth: true,\n        InputLabelProps: {shrink: true},\n        ...(props.TextFieldProps && {...props.TextFieldProps})\n    }\n\n    const autocompleteProps: AutocompleteProps<any, any, any, any> = {\n        loadingText: 'Carregando...',\n        noOptionsText: 'Nenhum item encontrado',\n        ...(AutocompleteProps && {...AutocompleteProps}),\n        open,\n        options,\n        loading: loading,\n        inputValue: searchText,\n        onOpen(){\n            setOpen(true)\n            onOpen && onOpen()\n        },\n        onClose(){\n            setOpen(false)\n            onClose && onClose()\n        },\n        onInputChange(event, value){\n            setSearchText(value)\n            onInputChange && onInputChange();\n        },\n        renderInput:params => {\n            return <TextField\n                {...params}\n                {...textFieldProps}\n                InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                        <>\n                            {loading && <CircularProgress color={\"inherit\"} size={20}/>}\n                            {params.InputProps.endAdornment}\n                        </>\n                    )\n                 }}\n\n            />\n        }\n    }\n\n    React.useEffect(() => {\n        if(!open && !freeSolo){\n            setOptions([])\n        }\n    }, [open])\n\n    const useEffectCondition = freeSolo ? debouncedSearchText : open;\n\n    React.useEffect(() => {\n        if(!open || (debouncedSearchText === \"\" && freeSolo)){\n            return;\n        }\n\n        let isSubscribed = true;\n        (async() => {\n          setLoading(true);\n          try {\n            const data = await props.fetchOptions(debouncedSearchText);\n            if (isSubscribed) {\n              setOptions(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n        })();\n        return () => {\n          isSubscribed = false;\n        };\n    }, [useEffectCondition]);\n\n    React.useImperativeHandle(ref, () => ({\n        clear: () => {\n            setSearchText(\"\")\n            setOptions([])\n        }\n    }))\n\n    return (\n        <Autocomplete {...autocompleteProps}/>\n    );\n});\n\nexport default AsyncAutocomplete;\n","/var/www/frontend/src/pages/video/Form/GenreField.tsx",[],"/var/www/frontend/src/pages/video/Form/CategoryField.tsx",[],"/var/www/frontend/src/hooks/useHttpHandled.ts",[],"/var/www/frontend/src/components/GridSelectedItem.tsx",[],"/var/www/frontend/src/components/GridSelected.tsx",[],"/var/www/frontend/src/hooks/useCollectionManager.ts",[],"/var/www/frontend/src/util/model-filters.ts",[],"/var/www/frontend/src/pages/video/Form/CastMemberField.tsx",[],"/var/www/frontend/src/hooks/useSnackbarFormError.ts",["326"],"import { useSnackbar } from \"notistack\"\nimport { useEffect } from \"react\";\n\nconst useSnackbarFormError = (submitCount, errors) => {\n    const snackbar = useSnackbar();\n    useEffect(() => {\n        const hasError = Object.keys(errors).length !== 0;\n        if(submitCount > 0 && hasError){\n            snackbar.enqueueSnackbar(\n                'Formulário inválido. Reveja os campos marcados em vermelho.', {variant: 'error'}\n            )\n        }\n    }, [submitCount])\n}\n\nexport default useSnackbarFormError\n","/var/www/frontend/src/hooks/useDeleteCollection.ts",[],"/var/www/frontend/src/components/DeleteDialog.tsx",[],"/var/www/frontend/src/components/Spinner.tsx",[],"/var/www/frontend/src/components/loading/LoadingContext.tsx",[],"/var/www/frontend/src/pages/video/Table.tsx",["327","328"],"import * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport { ListResponse, Video } from '../../util/models';\nimport DefaultTable, {makeActionStyles ,TableColumn, MuiDataTableRefComponent} from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit'\nimport { FilterResetButton } from '../../components/Table/FilterResetButton';\nimport useFilter from '../../hooks/useFilter';\nimport videoHttp from '../../util/http/video-http';\nimport useDeleteCollection from '../../hooks/useDeleteCollection';\nimport DeleteDialog from '../../components/DeleteDialog';\nimport LoadingContext from '../../components/loading/LoadingContext';\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"title\",\n        label: \"Título\",\n        width: \"20%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"genres\",\n        label: \"Gêneros\",\n        width: \"14%\",\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, tableMeta, updateValue) => {\n                return value.map(value => value.name).join(', ')\n            }\n        }\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        width: \"14%\",\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, tableMeta, updateValue) => {\n                return value.map(value => value.name).join(', ')\n            }\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '12%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/videos/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst debounceTime = 300\nconst debounceSearchTime = 300\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const subscribed = React.useRef(true)\n    const [data, setData] = React.useState<Video[]>([])\n    const loading = React.useContext(LoadingContext)\n    const tableRef = React.useRef() as React.MutableRefObject<MuiDataTableRefComponent>\n    const {openDeleteDialog, setOpenDeleteDialog, rowsToDelete, setRowsToDelete } = useDeleteCollection();\n\n    const {columns, filterManager, filterState, debouncedFilterState, totalRecords, setTotalRecords} = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef\n    })\n\n    React.useEffect(() => {\n        subscribed.current = true\n        filterManager.pushHistory()\n        getData()\n\n        return () => {\n            subscribed.current = false\n            //executado quando componente estiver desmontado\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ])\n\n    async function getData(){\n        try{\n            const {data} = await videoHttp.list<ListResponse<Video>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir\n                }\n            })\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n                if(openDeleteDialog){\n                    setOpenDeleteDialog(false)\n                }\n            }\n        } catch(error){\n            console.error(error);\n            if(videoHttp.isCancelledRequest(error)){\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    function deleteRows(confirmed: boolean){\n        if(!confirmed){\n            setOpenDeleteDialog(false);\n            return;\n        }\n        const ids = rowsToDelete\n            .data\n            .map(value => data[value.index].id)\n            .join(',');\n        videoHttp\n            .deleteCollection({ids})\n            .then(response => {\n                snackbar.enqueueSnackbar(\n                    'Registros excluídos com sucesso', {variant: 'success'}\n                )\n                if(rowsToDelete.data.length === filterState.pagination.per_page && filterState.pagination.page > 1){\n                    const page = filterState.pagination.page - 2;\n                    filterManager.changePage(page)\n                }else{\n                    getData()\n                }\n            })\n            .catch((error) => {\n                console.error(error)\n                snackbar.enqueueSnackbar(\n                    'Não foi possível excluir os registros', {variant: 'error'}\n                )\n            })\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DeleteDialog open={openDeleteDialog} handleClose={deleteRows}/>\n            <DefaultTable\n                title=\"Listagem de Vídeos\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debounceSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSide: true,\n                    responsive: 'vertical',\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => filterManager.resetFilter()}/> //default\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) => filterManager.changeColumnSort(changedColumn, direction),\n                    onRowsDelete: (rowsDeleted) => {\n                        setRowsToDelete(rowsDeleted as any);\n                        return false;\n                    }\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/components/loading/LoadingProvider.tsx",["329"],"import * as React from 'react';\nimport LoadingContext from './LoadingContext';\nimport { addGlobalRequestInterceptor, addGlobalResponseInterceptor, removeGlobalRequestInterceptor, removeGlobalResponseInterceptor } from '../../util/http';\n\nexport const LoadingProvider = (props) => {\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const [countRequest, setCountRequest] = React.useState(0);\n\n    React.useMemo(() => {\n        let isSubscribed = true\n        const requestIds = addGlobalRequestInterceptor((config) => {\n            if(isSubscribed){\n                setLoading(true)\n                setCountRequest((prevCountRequest) => prevCountRequest + 1)\n            }\n            return config\n        })\n        const responseIds = addGlobalResponseInterceptor((response) => {\n            if(isSubscribed){\n                decrementCountRequest()\n\n            }\n            return response\n        }, (error) => {\n            if(isSubscribed){\n                decrementCountRequest()\n\n            }\n            return Promise.reject(error)\n        })\n        return () => {\n            isSubscribed = false;\n            removeGlobalRequestInterceptor(requestIds);\n            removeGlobalResponseInterceptor(responseIds);\n        }\n    }, [true])\n\n    React.useEffect(() => {\n        if(!countRequest){\n            setLoading(false)\n        }\n    }, [countRequest])\n\n    function decrementCountRequest(){\n        setCountRequest((prevCountRequest) => prevCountRequest - 1)\n    }\n\n    return (\n        <LoadingContext.Provider value={loading}>\n            {props.children}\n        </LoadingContext.Provider>\n    );\n};\n","/var/www/frontend/src/components/SnackbarUpload/index.tsx",["330"],"import { Card, CardActions, Collapse, IconButton, List, makeStyles, Theme, Typography } from \"@material-ui/core\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React, { useState } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport classnames from \"classnames\";\nimport UploadItem from \"./UploadItem\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    card: {\n        width: 450,\n    },\n    cardActionRoot: {\n        padding: '8px 8px 8px 16px',\n        backgroundColor: theme.palette.primary.main\n    },\n    title: {\n        fontWeight: 'bold',\n        color: theme.palette.primary.contrastText\n    },\n    icons: {\n        marginLeft: 'auto !important',\n        color: theme.palette.primary.contrastText\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest\n        })\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest\n        })\n    },\n    list: {\n        paddingTop: 0,\n        paddingBottom: 0\n    }\n}))\ninterface SnackbarUploadProps{\n    id: string | number;\n}\n\nconst SnackbarUpload = React.forwardRef<any, SnackbarUploadProps>((props, ref) =>{\n    const {id} = props;\n    const classes = useStyles();\n    const {closeSnackbar} = useSnackbar();\n    const [expanded, setExpanded] = useState(true)\n\n    return (\n        <Card ref={ref} className={classes.card}>\n            <CardActions classes={{  root: classes.cardActionRoot }}>\n                <Typography variant=\"subtitle2\" className={classes.title}>\n                    Fazendo upload de 10 vídeo(s)\n                </Typography>\n                <div className={classes.icons}>\n                    <IconButton color={\"inherit\"} onClick={() => setExpanded(!expanded)} className={classnames(classes.expand, {[classes.expandOpen]: !expanded})}>\n                        <ExpandMoreIcon />\n                    </IconButton>\n                    <IconButton color={\"inherit\"} onClick={() => closeSnackbar}>\n                        <CloseIcon />\n                    </IconButton>\n                </div>\n            </CardActions>\n            <Collapse in={expanded}>\n                <List className={classes.list}>\n                    <UploadItem/>\n                    <UploadItem/>\n                    <UploadItem/>\n                </List>\n            </Collapse>\n        </Card>\n    )\n});\n\nexport default SnackbarUpload\n","/var/www/frontend/src/components/SnackbarUpload/UploadItem.tsx",["331"],"import { Divider, ListItem, ListItemIcon, ListItemText, makeStyles, Theme, Tooltip, Typography } from \"@material-ui/core\";\nimport MovieIcon from \"@material-ui/icons/Movie\";\nimport React from \"react\";\nimport { UploadAction } from \"./UploadAction\";\nimport UploadProgress from \"../UploadProgress\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    listItem: {\n        paddingTop: '7px',\n        paddingBottom: '7px',\n        height: '53px'\n    },\n    movieIcon: {\n        color: theme.palette.error.main,\n        minWidth: '40px'\n    },\n    listItemText: {\n        marginLeft: '6px',\n        marginRight: '24px',\n        color: theme.palette.text.secondary\n    }\n}))\n\ninterface UploadItemProps {\n\n}\n\nconst UploadItem: React.FC<UploadItemProps> = (props) => {\n    const classes = useStyles()\n\n    return (\n        <>\n            <Tooltip title={'Não foi possível fazer o upload, clique para mais detalhes'} placement={'left'}>\n                <ListItem\n                    className={classes.listItem}\n                    button\n                >\n                    <ListItemIcon className={classes.movieIcon}>\n                        <MovieIcon/>\n                    </ListItemIcon>\n                    <ListItemText className={classes.listItemText} primary={\n                        <Typography noWrap={true} variant={'subtitle2'} color={\"inherit\"}> E o vento Levou!!!</Typography>\n                    }>\n                    </ListItemText>\n                    {/* <UploadProgress size={30}/> */}\n                    <UploadAction/>\n                </ListItem>\n            </Tooltip>\n            <Divider component=\"li\" />\n        </>\n    )\n}\n\nexport default UploadItem;\n","/var/www/frontend/src/components/SnackbarUpload/UploadAction.tsx",[],"/var/www/frontend/src/pages/uploads/index.tsx",[],"/var/www/frontend/src/pages/uploads/UploadItem.tsx",[],"/var/www/frontend/src/pages/uploads/UploadAction.tsx",["332","333","334"],"import { Divider, Fade, IconButton, Theme, makeStyles} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport { Link } from \"react-router-dom\";\nimport { useDebounce } from \"use-debounce/lib\";\n\n\nconst useStyles = makeStyles((theme: Theme) => {\n    return {\n        successIcon: {\n            color: theme.palette.success.main,\n            marginLeft: theme.spacing(1),\n        },\n        errorIcon: {\n            color: theme.palette.error.main,\n            marginLeft: theme.spacing(1),\n        },\n        divider: {\n            height: \"20px\",\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n        },\n    };\n});\n\ninterface UploadActionProps {\n\n}\n\nconst UploadAction: React.FC<UploadActionProps> = (props) => {\n    const classes = useStyles();\n    const [show, setShow] = useState(false);\n    const [debouncedShow] = useDebounce(show, 2500);\n\n    return (\n        <Fade in={true} timeout={{ enter: 1000 }}>\n            <>\n                <CheckCircleIcon className={classes.successIcon} />\n                <ErrorIcon className={classes.errorIcon} />\n                <>\n                    <Divider className={classes.divider} orientation={\"vertical\"} />\n                    <IconButton>\n                        <DeleteIcon color={\"primary\"} />\n                    </IconButton>\n                    <IconButton component={Link} to={`/videos/uuid/edit`}>\n                        <EditIcon color={\"primary\"} />\n                    </IconButton>\n                </>\n            </>\n        </Fade>\n    )\n};\n\nexport default UploadAction;\n","/var/www/frontend/src/components/UploadProgress.tsx",[],{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"339","severity":1,"message":"340","line":111,"column":8,"nodeType":"341","endLine":117,"endColumn":6,"suggestions":"342"},{"ruleId":"339","severity":1,"message":"343","line":112,"column":9,"nodeType":"344","endLine":112,"endColumn":67},{"ruleId":"339","severity":1,"message":"343","line":116,"column":9,"nodeType":"344","endLine":116,"endColumn":57},{"ruleId":"345","severity":1,"message":"346","line":108,"column":12,"nodeType":"347","messageId":"348","endLine":108,"endColumn":22},{"ruleId":"339","severity":1,"message":"349","line":178,"column":7,"nodeType":"341","endLine":178,"endColumn":9,"suggestions":"350"},{"ruleId":"339","severity":1,"message":"340","line":188,"column":8,"nodeType":"341","endLine":194,"endColumn":6,"suggestions":"351"},{"ruleId":"339","severity":1,"message":"343","line":189,"column":9,"nodeType":"344","endLine":189,"endColumn":67},{"ruleId":"339","severity":1,"message":"343","line":193,"column":9,"nodeType":"344","endLine":193,"endColumn":57},{"ruleId":"339","severity":1,"message":"340","line":151,"column":8,"nodeType":"341","endLine":157,"endColumn":6,"suggestions":"352"},{"ruleId":"339","severity":1,"message":"343","line":152,"column":9,"nodeType":"344","endLine":152,"endColumn":67},{"ruleId":"339","severity":1,"message":"343","line":156,"column":9,"nodeType":"344","endLine":156,"endColumn":57},{"ruleId":"339","severity":1,"message":"353","line":91,"column":8,"nodeType":"341","endLine":91,"endColumn":10,"suggestions":"354"},{"ruleId":"339","severity":1,"message":"353","line":109,"column":8,"nodeType":"341","endLine":109,"endColumn":10,"suggestions":"355"},{"ruleId":"339","severity":1,"message":"353","line":92,"column":8,"nodeType":"341","endLine":92,"endColumn":10,"suggestions":"356"},{"ruleId":"357","severity":1,"message":"358","line":5,"column":19,"nodeType":"359","messageId":"360","endLine":5,"endColumn":40},{"ruleId":"357","severity":1,"message":"358","line":6,"column":18,"nodeType":"359","messageId":"360","endLine":6,"endColumn":38},{"ruleId":"357","severity":1,"message":"358","line":9,"column":14,"nodeType":"359","messageId":"360","endLine":9,"endColumn":63},{"ruleId":"357","severity":1,"message":"358","line":12,"column":14,"nodeType":"359","messageId":"360","endLine":12,"endColumn":52},{"ruleId":"357","severity":1,"message":"358","line":15,"column":14,"nodeType":"359","messageId":"360","endLine":15,"endColumn":67},{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"339","severity":1,"message":"361","line":50,"column":8,"nodeType":"341","endLine":50,"endColumn":10,"suggestions":"362"},{"ruleId":"339","severity":1,"message":"353","line":180,"column":8,"nodeType":"341","endLine":180,"endColumn":10,"suggestions":"363"},{"ruleId":"339","severity":1,"message":"364","line":76,"column":8,"nodeType":"341","endLine":76,"endColumn":14,"suggestions":"365"},{"ruleId":"339","severity":1,"message":"366","line":100,"column":8,"nodeType":"341","endLine":100,"endColumn":28,"suggestions":"367"},{"ruleId":"339","severity":1,"message":"368","line":13,"column":8,"nodeType":"341","endLine":13,"endColumn":21,"suggestions":"369"},{"ruleId":"339","severity":1,"message":"340","line":122,"column":8,"nodeType":"341","endLine":127,"endColumn":6,"suggestions":"370"},{"ruleId":"339","severity":1,"message":"343","line":123,"column":9,"nodeType":"344","endLine":123,"endColumn":67},{"ruleId":"339","severity":1,"message":"371","line":36,"column":9,"nodeType":"359","endLine":36,"endColumn":13},{"ruleId":"345","severity":1,"message":"372","line":47,"column":12,"nodeType":"347","messageId":"348","endLine":47,"endColumn":14},{"ruleId":"345","severity":1,"message":"373","line":5,"column":8,"nodeType":"347","messageId":"348","endLine":5,"endColumn":22},{"ruleId":"345","severity":1,"message":"374","line":2,"column":17,"nodeType":"347","messageId":"348","endLine":2,"endColumn":26},{"ruleId":"345","severity":1,"message":"375","line":35,"column":18,"nodeType":"347","messageId":"348","endLine":35,"endColumn":25},{"ruleId":"345","severity":1,"message":"376","line":36,"column":12,"nodeType":"347","messageId":"348","endLine":36,"endColumn":25},"no-native-reassign",["377"],"no-negated-in-lhs",["378"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'filterManager' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["379"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","@typescript-eslint/no-unused-vars","'categories' is assigned a value but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'columnCategories.options' and 'snackbar'. Either include them or remove the dependency array.",["380"],["381"],["382"],"React Hook React.useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.",["383"],["384"],["385"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has a missing dependency: 'filterManager'. Either include it or remove the dependency array.",["386"],["387"],"React Hook React.useEffect has a missing dependency: 'freeSolo'. Either include it or remove the dependency array.",["388"],"React Hook React.useEffect has missing dependencies: 'debouncedSearchText', 'freeSolo', 'open', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["389"],"React Hook useEffect has missing dependencies: 'errors' and 'snackbar'. Either include them or remove the dependency array.",["390"],["391"],"The true literal is not a valid dependency because it never changes. You can safely remove it.","'id' is assigned a value but never used.","'UploadProgress' is defined but never used.","'useEffect' is defined but never used.","'setShow' is assigned a value but never used.","'debouncedShow' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"392","fix":"396"},{"desc":"392","fix":"397"},{"desc":"398","fix":"399"},{"desc":"398","fix":"400"},{"desc":"398","fix":"401"},{"desc":"402","fix":"403"},{"desc":"398","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"392","fix":"411"},"Update the dependencies array to be: [debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",{"range":"412","text":"413"},"Update the dependencies array to be: [columnCategories.options, snackbar]",{"range":"414","text":"415"},{"range":"416","text":"413"},{"range":"417","text":"413"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"418","text":"419"},{"range":"420","text":"419"},{"range":"421","text":"419"},"Update the dependencies array to be: [filterManager]",{"range":"422","text":"423"},{"range":"424","text":"419"},"Update the dependencies array to be: [freeSolo, open]",{"range":"425","text":"426"},"Update the dependencies array to be: [debouncedSearchText, freeSolo, open, props, useEffectCondition]",{"range":"427","text":"428"},"Update the dependencies array to be: [errors, snackbar, submitCount]",{"range":"429","text":"430"},{"range":"431","text":"413"},[3478,3742],"[debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",[6083,6085],"[columnCategories.options, snackbar]",[6344,6608],[4979,5243],[2888,2890],"[id, reset, snackbar]",[3664,3666],[2972,2974],[1915,1917],"[filterManager]",[6270,6272],[2558,2564],"[freeSolo, open]",[3157,3177],"[debouncedSearchText, freeSolo, open, props, useEffectCondition]",[457,470],"[errors, snackbar, submitCount]",[3709,3915]]